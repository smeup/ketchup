/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { KupAccordionData, KupAccordionExpansionMode, KupAccordionItemCollapsedEventPayload, KupAccordionItemExpandedEventPayload, KupAccordionItemSelectedEventPayload, KupAccordionTreeNodeCollapsedEventPayload, KupAccordionTreeNodeExpandedEventPayload, KupAccordionTreeNodeSelectedEventPayload } from "./components/kup-accordion/kup-accordion-declarations";
import { GenericFilter, KupGlobalFilterMode } from "./utils/filters/filters-declarations";
import { GenericObject, KupEventPayload } from "./types/GenericTypes";
import { Column, DataTable, GroupLabelDisplayMode, GroupObject, KupDatatableAutoRowSelectEventPayload, KupDataTableCellButtonClickEventPayload, KupDataTableCellTextFieldInputEventPayload, KupDatatableCellUpdateEventPayload, KupDatatableClickEventPayload, KupDatatableColumnMenuEventPayload, KupDatatableLoadMoreClickEventPayload, KupDatatableRowActionClickEventPayload, KupDatatableRowSelectedEventPayload, LoadMoreMode, PaginatorPos, RowAction, SelectionMode, ShowGrid, SortObject, TableData, TotalsMap } from "./components/kup-data-table/kup-data-table-declarations";
import { ItemsDisplayMode, KupListData, KupListEventPayload, KupListRole } from "./components/kup-list/kup-list-declarations";
import { KupAutocompleteEventPayload, kupAutocompleteFilterChangedEventPayload } from "./components/kup-autocomplete/kup-autocomplete-declarations";
import { KupBoxAutoSelectEventPayload, KupBoxClickEventPayload, KupBoxContextMenuEventPayload, KupBoxData, KupBoxKanban, KupBoxLayout, KupBoxRow, KupBoxRowActionClickEventPayload, KupBoxSelectedEventPayload } from "./components/kup-box/kup-box-declarations";
import { KupStore } from "./components/kup-state/kup-store";
import { FButtonStyling } from "./f-components/f-button/f-button-declarations";
import { KupButtonClickEventPayload } from "./components/kup-button/kup-button-declarations";
import { KupTreeColumnMenuEventPayload, KupTreeContextMenuEventPayload, KupTreeDynamicMassExpansionEventPayload, KupTreeExpansionMode, KupTreeNodeButtonClickEventPayload, KupTreeNodeCollapseEventPayload, KupTreeNodeExpandEventPayload, KupTreeNodeSelectedEventPayload, TreeNode, TreeNodePath } from "./components/kup-tree/kup-tree-declarations";
import { KupButtonListClickEventPayload } from "./components/kup-button-list/kup-button-list-declarations";
import { KupCalendarDateClickEventPayload, KupCalendarEventClickEventPayload, KupCalendarEventDropEventPayload, KupCalendarViewChangeEventPayload, KupCalendarViewTypes } from "./components/kup-calendar/kup-calendar-declarations";
import { KupCardData, KupCardEventPayload, KupCardFamily } from "./components/kup-card/kup-card-declarations";
import { ChartAspect, ChartAxis, ChartOfflineMode, ChartSerie, ChartTitle, ChartType, KupChartClickEvent, KupChartSort, KupChartTrendlines } from "./components/kup-chart/kup-chart-declarations";
import { KupCheckboxEventPayload } from "./components/kup-checkbox/kup-checkbox-declarations";
import { FChipData, FChipType } from "./f-components/f-chip/f-chip-declarations";
import { KupChipEventPayload } from "./components/kup-chip/kup-chip-declarations";
import { KupColorPickerEventPayload } from "./components/kup-color-picker/kup-color-picker-declarations";
import { KupComboboxEventPayload } from "./components/kup-combobox/kup-combobox-declarations";
import { CrudCallBackOnFormEventResult, CrudConfig, CrudRecord, CrudRecordsChanged } from "./components/kup-crud/kup-crud-declarations";
import { FormActionEventDetail, FormActions, FormCells, FormConfig, FormFieldEventDetail, FormFields, FormMessage, FormSection } from "./components/kup-form/kup-form-declarations";
import { SearchFilterSubmittedEventDetail, SearchSelectionUpdatedEventDetail } from "./components/kup-search/kup-search-declarations";
import { KupDatePickerEventPayload } from "./components/kup-date-picker/kup-date-picker-declarations";
import { KupDropdownButtonEventPayload } from "./components/kup-dropdown-button/kup-dropdown-button-declarations";
import { KupEchartTitle } from "./components/kup-echart/kup-echart-declarations";
import { KupFieldChangeEvent, KupFieldSubmitEvent } from "./components/kup-field/kup-field-declarations";
import { KupBadge } from "./components/kup-badge/kup-badge";
import { FImageData, FImageProps } from "./f-components/f-image/f-image-declarations";
import { KupImageClickEventPayload } from "./components/kup-image/kup-image-declarations";
import { KupLazyRender } from "./components/kup-lazy/kup-lazy-declarations";
import { MagicBoxData } from "./components/kup-magic-box/kup-magic-box-declarations";
import { KupNavBarStyling } from "./components/kup-nav-bar/kup-nav-bar-declarations";
import { KupPaginatorPageChangedEventPayload, KupPaginatorRowsPerPageChangedEventPayload, PaginatorMode } from "./components/kup-paginator/kup-paginator-declarations";
import { KupQlikGrid, QlikServer } from "./components/kup-qlik/kup-qlik-declarations";
import { KupRadioChangeEventPayload, KupRadioData } from "./components/kup-radio/kup-radio-declarations";
import { KupRatingClickEventPayload } from "./components/kup-rating/kup-rating-declarations";
import { KupSwitchEventPayload } from "./components/kup-switch/kup-switch-declarations";
import { KupTabBarClickEventPayload, KupTabBarData, KupTabBarEventPayload } from "./components/kup-tab-bar/kup-tab-bar-declarations";
import { KupTextFieldEventPayload } from "./components/kup-text-field/kup-text-field-declarations";
import { KupTimePickerEventPayload } from "./components/kup-time-picker/kup-time-picker-declarations";
import { KupTooltipActionCommandClickEventPayload, KupTooltipDefaultEventPayload, KupTooltipLoadEventPayload, KupTooltipTreeDynamicMassExpansionEventPayload, KupTooltipTreeNodeButtonClickEventPayload, KupTooltipTreeNodeDblClickEventPayload, KupTooltipTreeNodeExpandEventPayload, KupTooltipTreeNodeSelectedEventPayload, TooltipCellOptions, TooltipData, TooltipDetailData, TooltipRelatedObject } from "./components/kup-tooltip/kup-tooltip-declarations";
export namespace Components {
    interface KupAccordion {
        /**
          * This method collapse all items
         */
        "collapseAll": () => Promise<void>;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Data of the accordion.
          * @default null
         */
        "data": KupAccordionData;
        /**
          * This method expand all items
         */
        "expandAll": () => Promise<void>;
        /**
          * The mode of the expansion. If single you can't find more than one item expanded at a given time, if multiple you could.
          * @default KupAccordionExpansionMode.SINGLE
         */
        "expansionMode": KupAccordionExpansionMode;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * When set to true it activates the global filter.
          * @default false
         */
        "globalFilter": boolean;
        /**
          * The mode of the global filter.
          * @default KupGlobalFilterMode.SIMPLE
         */
        "globalFilterMode": KupGlobalFilterMode;
        /**
          * The value of the global filter.
          * @default ""
         */
        "globalFilterValue": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * The names of the selected items.
          * @default []
         */
        "selectedItemsNames": string[];
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * This method activates or deactivates an item
          * @param itemName - Name of the item.
         */
        "toggleItem": (itemName: string) => Promise<void>;
    }
    interface KupAutocomplete {
        /**
          * Function that can be invoked when the filter is updated, but only if in serverHandledFilter mode. It returns the items filtered.
         */
        "callBackOnFilterUpdate": (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the sub-components.
         */
        "data": Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * Sets how to show the selected item value. Suported values: "code", "description", "both".
         */
        "displayMode": ItemsDisplayMode;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Used to retrieve the value of the component.
          * @returns Value of the component.
         */
        "getValue": () => Promise<string>;
        /**
          * Sets the initial value of the component.
         */
        "initialValue": string;
        /**
          * The minimum number of chars to trigger the autocomplete
         */
        "minimumChars": number;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets how to return the selected item value. Suported values: "code", "description", "both".
         */
        "selectMode": ItemsDisplayMode;
        /**
          * When true, it will emit events to inform the listener of the change of the current filter value. Also the component builtin filter will be disabled.
         */
        "serverHandledFilter": boolean;
        /**
          * Sets the focus to the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Sets the value of the component.
          * @param value - Value of the component.
         */
        "setValue": (value: string) => Promise<void>;
    }
    interface KupBadge {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The data of the image displayed inside the badge.
          * @default null
         */
        "imageData": GenericObject;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * The text displayed inside the badge.
          * @default null
         */
        "text": string;
    }
    interface KupBox {
        /**
          * Data of the card linked to the box when the latter's layout must be a premade template.
          * @default null
         */
        "cardData": GenericObject;
        /**
          * Number of columns
          * @default 1
         */
        "columns": number;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Actual data of the box.
          * @default null
         */
        "data": KupBoxData;
        /**
          * Enable dragging
          * @default false
         */
        "dragEnabled": boolean;
        /**
          * Enable dropping
          * @default false
         */
        "dropEnabled": boolean;
        /**
          * Drop can be done in section
          * @default false
         */
        "dropOnSection": boolean;
        /**
          * If enabled, a button to load / display the row actions will be displayed on the right of every box
          * @default false
         */
        "enableRowActions": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * When set to true it activates the global filter.
          * @default false
         */
        "globalFilter": boolean;
        /**
          * The value of the global filter.
          * @default ""
         */
        "globalFilterValue": string;
        /**
          * Displays the boxlist as a Kanban.
          * @default null
         */
        "kanban": KupBoxKanban;
        /**
          * How the field will be displayed. If not present, a default one will be created.
          * @default undefined
         */
        "layout": KupBoxLayout;
        "loadRowActions": (row: KupBoxRow, actions: RowAction[]) => Promise<void>;
        /**
          * Enable multi selection
          * @default false
         */
        "multiSelection": boolean;
        /**
          * Current page number
          * @default 1
         */
        "pageSelected": number;
        /**
          * Number of boxes per page
          * @default 10
         */
        "pageSize": number;
        /**
          * Enables pagination
          * @default false
         */
        "pagination": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Number of current rows per page
          * @default undefined
         */
        "rowsPerPage": number;
        /**
          * Activates the scroll on hover function.
          * @default false
         */
        "scrollOnHover": boolean;
        /**
          * Automatically selects the box at the specified index
          * @default undefined
         */
        "selectBox": number;
        /**
          * Multiple selection
          * @default undefined
         */
        "selectedRowsState": string;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * If enabled, highlights the selected box/boxes
          * @default true
         */
        "showSelection": boolean;
        /**
          * If set to true, displays tooltip on right click; if set to false, displays tooltip on mouseOver.
          * @default true
         */
        "showTooltipOnRightClick": boolean;
        /**
          * If sorting is enabled, specifies which column to sort
          * @default undefined
         */
        "sortBy": string;
        /**
          * Enable sorting
          * @default false
         */
        "sortEnabled": boolean;
        "stateId": string;
        "store": KupStore;
        /**
          * Disable swipe
          * @default false
         */
        "swipeDisabled": boolean;
        /**
          * Defines the timeout for tooltip detail
          * @default undefined
         */
        "tooltipDetailTimeout": number;
        /**
          * Enable show tooltip
          * @default true
         */
        "tooltipEnabled": boolean;
        /**
          * Defines the timeout for tooltip load
          * @default undefined
         */
        "tooltipLoadTimeout": number;
    }
    interface KupBpmn {
        /**
          * When set to true, the diagram won't be interactive but it will displayed as an image.
          * @default false
         */
        "asImage": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        "openDiagram": () => Promise<void>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
    }
    interface KupButton {
        /**
          * When set to true, the icon button state will be on.
          * @default false
         */
        "checked": boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * When set, the button will show this icon.
          * @default null
         */
        "icon": string;
        /**
          * When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
          * @default null
         */
        "iconOff": string;
        /**
          * When set, the button will show this text.
          * @default null
         */
        "label": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Defines the style of the button. Styles available: "flat", "outlined" and "raised" which is also the default.
          * @default FButtonStyling.RAISED
         */
        "styling": FButtonStyling;
        /**
          * When set to true, the icon button will be toggable on/off.
          * @default false
         */
        "toggable": boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "trailingIcon": boolean;
    }
    interface KupButtonList {
        /**
          * Number of columns.
          * @default 0
         */
        "columns": number;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the sub-components.
          * @default []
         */
        "data": TreeNode[];
        /**
          * When set to true, the sub-components are disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * When set to true, highlights the selected button with the secondary color of KupTheme.
          * @default true
         */
        "showSelection": boolean;
        /**
          * Defines the style of the buttons. Available styles are "flat", "outlined" and "raised" (which is the default).
          * @default FButtonStyling.RAISED
         */
        "styling": FButtonStyling;
    }
    interface KupCalendar {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Actual data of the calendar.
          * @default null
         */
        "data": TableData;
        /**
          * Column containing events' dates.
          * @default null
         */
        "dateCol": string;
        /**
          * Column containing events' descriptions.
          * @default null
         */
        "descrCol": string;
        /**
          * Column containing events' ending time.
          * @default null
         */
        "endCol": string;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * When disabled, the navigation toolbar won't be displayed.
          * @default false
         */
        "hideNavigation": boolean;
        /**
          * Column containing events' icons. There can be multiple icons, divided by ";".
          * @default null
         */
        "iconCol": string;
        /**
          * Column containing events' images. There can be multiple images, divided by ";".
          * @default null
         */
        "imageCol": string;
        /**
          * Sets the initial date of the calendar. Must be in ISO format (YYYY-MM-DD).
          * @default null
         */
        "initialDate": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Column containing events' starting time.
          * @default null
         */
        "startCol": string;
        /**
          * Column containing events' CSS styles.
          * @default null
         */
        "styleCol": string;
        /**
          * Type of the view.
          * @default KupCalendarViewTypes.MONTH
         */
        "viewType": KupCalendarViewTypes;
    }
    interface KupCard {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * The actual data of the card.
          * @default null
         */
        "data": KupCardData;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Defines whether the card is a menu or not. Works together with menuVisible.
          * @default false
         */
        "isMenu": boolean;
        /**
          * Sets the type of the card.
          * @default KupCardFamily.STANDARD
         */
        "layoutFamily": KupCardFamily;
        /**
          * Sets the number of the layout.
          * @default 1
         */
        "layoutNumber": number;
        /**
          * Sets the status of the card as menu, when false it's hidden otherwise it's visible. Works together with isMenu.
          * @default false
         */
        "menuVisible": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * This method is invoked by KupManager whenever the component changes size.
         */
        "resizeCallback": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "sizeX": string;
        /**
          * The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "sizeY": string;
    }
    interface KupChart {
        /**
          * Sets the chart to a 2D or 3D aspect. 3D only works for Pie graphs.
          * @default undefined
         */
        "asp": ChartAspect;
        /**
          * Sets the axis of the chart.
          * @default undefined
         */
        "axis": string;
        /**
          * Title of the graph.
          * @default undefined
         */
        "chartTitle": ChartTitle;
        /**
          * Colors of the chart.
          * @default []
         */
        "colors": string[];
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * The actual data of the chart.
          * @default undefined
         */
        "data": DataTable;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Customize the hAxes for multiple-chart.
         */
        "hAxes": ChartAxis[];
        /**
          * Customize the hAxis.
          * @default undefined
         */
        "hAxis": ChartAxis;
        /**
          * Sets the position of the legend. Supported values: bottom, labeled, left, none, right, top. Keep in mind that legend types are tied to chart types, some combinations might not work.
          * @default "right"
         */
        "legend": string;
        /**
          * Renders charts without the Google API and using jQuery Sparkline.
          * @default undefined
         */
        "offlineMode": ChartOfflineMode;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * This method is invoked by KupManager whenever the component changes size.
         */
        "resizeCallback": () => Promise<void>;
        /**
          * The data series to be displayed. They must be of the same type.
          * @default undefined
         */
        "series": ChartSerie[];
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Displays the numerical values.
          * @default false
         */
        "showMarks": boolean;
        /**
          * The width of the chart, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "sizeX": string;
        /**
          * The height of the chart, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "sizeY": string;
        /**
          * Used to sort series.
          * @default null
         */
        "sorting": KupChartSort[];
        /**
          * Displays the data columns of an object on top of each other.
         */
        "stacked": boolean;
        /**
          * KupChartTrendlines.
         */
        "trendlines": KupChartTrendlines;
        /**
          * The type of the chart. Supported formats: Area, Bubble, Cal, Candlestick, Combo, Geo, Hbar, Line, Ohlc, Pie, Sankey, Scatter, Unk, Vbar.
          * @default [ChartType.Hbar]
         */
        "types": ChartType[];
        /**
          * Customize the vAxes for multiple-chart.
         */
        "vAxes": ChartAxis[];
        /**
          * Customize the vAxis.
          * @default undefined
         */
        "vAxis": ChartAxis;
        /**
          * Google chart version to load
          * @default "45.2"
         */
        "version": string;
    }
    interface KupCheckbox {
        /**
          * Defaults at false. When set to true, the component will be set to 'checked'.
          * @default false
         */
        "checked": boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * When set to true, the component will be set to 'indeterminate'.
          * @default false
         */
        "indeterminate": boolean;
        /**
          * When specified, its content will be shown as a label.
          * @default null
         */
        "label": string;
        /**
          * When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
    }
    interface KupChip {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * List of elements.
          * @default []
         */
        "data": FChipData[];
        /**
          * List of elements.
          * @default []
         */
        "dataNew": TreeNode[];
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * The type of chip. Available types: input, filter, choice or empty for default.
          * @default FChipType.STANDARD
         */
        "type": FChipType;
    }
    interface KupColorPicker {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the text field.
          * @default null
         */
        "data": Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Retrieves the component's value.
          * @returns Value of the component.
         */
        "getValue": () => Promise<string>;
        /**
          * Sets the initial value of the component. Can be css color name, hex code or rgb code (sample: "red" or rgb(255, 0, 0) or "#FF0000" ).
          * @default ""
         */
        "initialValue": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the focus to the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Sets the component's value.
          * @param value - Value to be set.
         */
        "setValue": (value: string) => Promise<void>;
        /**
          * When true, the component's text field will be replaced by a swatch.
          * @default false
         */
        "swatchOnly": boolean;
    }
    interface KupCombobox {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the sub-components (date input text field).
         */
        "data": Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * Sets how to show the selected item value. Suported values: "code", "description", "both".
         */
        "displayMode": ItemsDisplayMode;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Retrieves the component's value.
          * @returns Value of the component.
         */
        "getValue": () => Promise<string>;
        /**
          * Sets the initial value of the component
         */
        "initialValue": string;
        /**
          * Lets the combobox behave as a select element.
         */
        "isSelect": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets how to return the selected item value. Suported values: "code", "description", "both".
         */
        "selectMode": ItemsDisplayMode;
        /**
          * Sets the focus to the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Sets the component's value.
          * @param value - Value to be set.
         */
        "setValue": (value: string) => Promise<void>;
    }
    interface KupCrud {
        "actions": FormActions;
        "autocompleteCallBackOnFilterUpdate": (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        "closeForm": () => Promise<void>;
        "config": CrudConfig;
        "crudCallBackOnFormActionSubmitted": (
        detail: FormActionEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "crudCallBackOnFormFieldChanged": (
        detail: FormFieldEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "disabled": boolean;
        "extra": any;
        "extraMessages": FormMessage[];
        "fields": FormFields;
        "openForm": () => Promise<void>;
        "records": CrudRecord[];
        "refid": string;
        "searchCallBackOnFilterSubmitted": (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        "sections": FormSection;
    }
    interface KupDash {
        /**
          * The component can be clicked.
         */
        "active": boolean;
        /**
          * Sets the font size of the component.
         */
        "fontsize": string;
        /**
          * No idea what this is about.
         */
        "index": number;
        /**
          * Sets the layout of the component.
         */
        "layout": string;
    }
    interface KupDashList {
        "active": boolean;
        "columnsNumber": number;
        "data": TableData;
        "fontsize": string;
        "fullWidth": boolean;
        "horizontal": boolean;
        "iconColor": Array<any>;
        "layout": string;
        "textColor": Array<any>;
        "valueColor": Array<any>;
    }
    interface KupDataTable {
        /**
          * Closes any opened column menu.
         */
        "closeColumnMenu": () => Promise<void>;
        /**
          * Collapses all groups.
         */
        "collapseAll": () => Promise<void>;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * The data of the table.
         */
        "data": TableData;
        "defaultSortingFunction": (columns: Column[], receivingColumnIndex: number, sortedColumnIndex: number, useNewObject?: boolean) => Promise<Column[]>;
        /**
          * The density of the rows, defaults at 'medium' and can be also set to 'large' or 'small'.
         */
        "density": string;
        /**
          * Enables drag.
         */
        "dragEnabled": boolean;
        /**
          * Enables drop.
         */
        "dropEnabled": boolean;
        /**
          * When set to true, editable cells will be rendered using input components.
          * @default false
         */
        "editableData": boolean;
        /**
          * Defines the label to show when the table is empty.
         */
        "emptyDataLabel": string;
        /**
          * Enables the extracolumns add buttons.
         */
        "enableExtraColumns": boolean;
        /**
          * Enables the sorting of columns by dragging them into different columns.
         */
        "enableSortableColumns": boolean;
        /**
          * Expands all groups.
         */
        "expandAll": () => Promise<void>;
        /**
          * Expands groups when set to true.
         */
        "expandGroups": boolean;
        /**
          * List of filters set by the user.
         */
        "filters": GenericFilter;
        /**
          * Fixes the given number of columns so that they stay visible when horizontally scrolling the data-table. If grouping is active or the value of the prop is <= 0, this prop will have no effect. Can be combined with fixedRows.
          * @see fixedRows
         */
        "fixedColumns": number;
        /**
          * Fixes the given number of rows so that they stay visible when vertically scrolling the data-table. If grouping is active or the value of the prop is <= 0, this prop will have no effect. Can be combined with fixedColumns.
          * @see fixedColumns
         */
        "fixedRows": number;
        /**
          * Forces cells with long text and a fixed column size to have an ellipsis set on their text. The reflect attribute is mandatory to allow styling.
         */
        "forceOneLine": boolean;
        "getInternalState": () => Promise<{ groups: GroupObject[]; filters: GenericFilter; data: TableData; }>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * When set to true it activates the global filter.
         */
        "globalFilter": boolean;
        /**
          * The value of the global filter.
         */
        "globalFilterValue": string;
        /**
          * How the label of a group must be displayed. For available values [see here]{@link GroupLabelDisplayMode}
         */
        "groupLabelDisplay": GroupLabelDisplayMode;
        /**
          * The list of groups.
         */
        "groups": Array<GroupObject>;
        /**
          * When set to true the header will stick on top of the table when scrolling.
         */
        "headerIsPersistent": boolean;
        /**
          * When set to true, clicked-on rows will have a visual feedback.
          * @default false
         */
        "isFocusable": boolean;
        /**
          * When set to true, extra rows will be automatically loaded once the last row enters the viewport. When groups are present, the number of rows is referred to groups and not to their content. Paginator is disabled.
         */
        "lazyLoadRows": boolean;
        /**
          * Defines the placeholder character which will be replaced by a line break inside table header cells, normal or sticky.
         */
        "lineBreakCharacter": string;
        /**
          * Sets a maximum limit of new records which can be required by the load more functionality.
         */
        "loadMoreLimit": number;
        /**
          * Establish the modality of how many new records will be downloaded.  This property is regulated also by loadMoreStep.
          * @see loadMoreStep *
          * @see loadMoreLimit
         */
        "loadMoreMode": LoadMoreMode;
        /**
          * The number of records which will be requested to be downloaded when clicking on the load more button.  This property is regulated also by loadMoreMode.
          * @see loadMoreMode *
          * @see loadMoreLimit
         */
        "loadMoreStep": number;
        /**
          * Opens the column menu of the given column.
          * @param column - Name of the column.
         */
        "openColumnMenu": (column: string) => Promise<void>;
        /**
          * Current selected page set on component load
         */
        "pageSelected": number;
        /**
          * Sets the position of the paginator. Available positions: top, bottom or both.
         */
        "paginatorPos": PaginatorPos;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the possibility to remove the selected column.
         */
        "removableColumns": boolean;
        /**
          * This method is invoked by KupManager whenever the component changes size.
         */
        "resizeCallback": () => Promise<void>;
        /**
          * Sets the actions of the rows.
         */
        "rowActions": Array<RowAction>;
        /**
          * Sets the number of rows per page to display.
         */
        "rowsPerPage": number;
        /**
          * Activates the scroll on hover function.
         */
        "scrollOnHover": boolean;
        /**
          * Selects the row at the specified rendered rows prosition (base 1).
         */
        "selectRow": number;
        /**
          * Semicolon separated rows id to select.
         */
        "selectRowsById": string;
        /**
          * Set the type of the rows selection.
         */
        "selection": SelectionMode;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * This method will set the selected rows of the component.
          * @param rowsById - String containing the ids separated by ";".
          * @param emitEvent - The event will always be emitted unless emitEvent is set to false.
         */
        "setSelectedRows": (rowsById: string, emitEvent?: boolean) => Promise<void>;
        /**
          * If set to true, displays the button to open the customization panel.
         */
        "showCustomization": boolean;
        /**
          * When set to true enables the column filters.
         */
        "showFilters": boolean;
        /**
          * When set to true shows the footer.
         */
        "showFooter": boolean;
        /**
          * Can be used to customize the grid view of the table.
         */
        "showGrid": ShowGrid;
        /**
          * When set to true enables the column grouping.
         */
        "showGroups": boolean;
        /**
          * Enables rendering of the table header.
          * @namespace KupDataTable.showHeader
         */
        "showHeader": boolean;
        /**
          * If set to true, displays the button to load more records.
         */
        "showLoadMore": boolean;
        /**
          * If set to true, displays tooltip on right click; if set to false, displays tooltip on mouseOver.
         */
        "showTooltipOnRightClick": boolean;
        /**
          * Defines the current sorting options.
         */
        "sort": Array<SortObject>;
        /**
          * When set to true enables the sorting of the columns by clicking on the column header.
         */
        "sortEnabled": boolean;
        /**
          * If set to true, when a column is dragged to be sorted, the component directly mutates the data.columns property and then fires the event
         */
        "sortableColumnsMutateData": boolean;
        "stateId": string;
        "store": KupStore;
        /**
          * Sets the height of the table.
         */
        "tableHeight": string;
        /**
          * Sets the width of the table.
         */
        "tableWidth": string;
        /**
          * Defines the timeout for tooltip detail
         */
        "tooltipDetailTimeout": number;
        /**
          * Enable show tooltip
         */
        "tooltipEnabled": boolean;
        /**
          * Defines the timeout for tooltip load
         */
        "tooltipLoadTimeout": number;
        /**
          * Defines the current totals options
         */
        "totals": TotalsMap;
        /**
          * Transposes the data of the data table
         */
        "transpose": boolean;
    }
    interface KupDatePicker {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the sub-components.
          * @default null
         */
        "data": Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * First day number (0 - sunday, 1 - monday, ...)
          * @default 1
         */
        "firstDayIndex": number;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Retrieves the component's value.
          * @returns Value of the component.
         */
        "getValue": () => Promise<string>;
        /**
          * Sets the initial value of the component
          * @default ""
         */
        "initialValue": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the focus to the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Sets the component's value.
          * @param value - Value to be set.
         */
        "setValue": (value: string) => Promise<void>;
    }
    interface KupDrawer {
        /**
          * Closes the drawer.
         */
        "close": () => Promise<void>;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Returns the state of the drawer.
          * @returns True when opened, false when closed.
         */
        "isOpened": () => Promise<boolean>;
        /**
          * Opens the drawer.
         */
        "open": () => Promise<void>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Opens the drawer when closed and vice-versa.
         */
        "toggle": () => Promise<void>;
    }
    interface KupDropdownButton {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the sub-components.
          * @default null
         */
        "data": Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Sets how to show the selected item value. Suported values: "code", "description", "both".
          * @default ItemsDisplayMode.DESCRIPTION
         */
        "displayMode": ItemsDisplayMode;
        /**
          * Default value is false. When set to true, the arrow dropdown button is the only button displayed.
          * @default false
         */
        "dropdownOnly": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Returns the component's internal value.
         */
        "getValue": () => Promise<string>;
        /**
          * Defaults at null. When set, the button will show this icon.
          * @default icon
         */
        "icon": string;
        /**
          * Sets the initial value of the component.
          * @default ""
         */
        "initialValue": string;
        /**
          * Defaults at null. When set, the button will show this text.
          * @default ""
         */
        "label": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets how to return the selected item value. Suported values: "code", "description", "both".
          * @default ItemsDisplayMode.CODE
         */
        "selectMode": ItemsDisplayMode;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Sets the internal value of the component.
         */
        "setValue": (value: string) => Promise<void>;
        /**
          * Defines the style of the button. Styles available: "flat", "outlined" and "raised" which is also the default.
          * @default FButtonStyling.RAISED
         */
        "styling": FButtonStyling;
        /**
          * Defaults at null. When set, the icon will be shown after the text.
          * @default false
         */
        "trailingIcon": boolean;
    }
    interface KupEchart {
        /**
          * Sets the axis of the chart.
          * @default ""
         */
        "axis": string;
        /**
          * Title of the graph.
          * @default undefined
         */
        "chartTitle": KupEchartTitle;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * The actual data of the chart.
          * @default {}
         */
        "data": object;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Sets the position of the legend. Supported values: bottom, left, right, top. Keep in mind that legend types are tied to chart types, some combinations might not work.
          * @default undefined
         */
        "legend": string;
        /**
          * Choose which map you want to view, supported values: "europe", "africa", "asia", "oceania", "america" and "world". You can also provide your own JSON.
          * @default undefined
         */
        "mapType": any;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * This method is invoked by KupManager whenever the component changes size.
         */
        "resizeCallback": () => Promise<void>;
        /**
          * The data series to be displayed. They must be of the same type.
          * @default undefined
         */
        "series": string[];
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * The type of the chart. Supported formats: Line, Pie, Map, Scatter
          * @default ['Line']
         */
        "types": String[];
    }
    interface KupEditor {
        /**
          * The html to be rendered and edited
         */
        "text": string;
    }
    interface KupField {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Effective data to pass to the component.
          * @default {}
         */
        "data": Object;
        /**
          * Provides an interface to get the current value programmatically
          * @method getCurrentValue
          * @returns
         */
        "getCurrentValue": () => Promise<string | object>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The text of the label. If set to empty or has only white space chars, the label will be removed.
          * @default ""
         */
        "label": string;
        /**
          * Sets the label's position, left right or top.
          * @default "left"
         */
        "labelPos": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets whether the submit button must be displayed or not.
          * @default false
         */
        "showSubmit": boolean;
        /**
          * Sets the submit button's label.
          * @default ""
         */
        "submitLabel": string;
        /**
          * Sets the submit button's position, top right bottom or left.
          * @default "right"
         */
        "submitPos": string;
        /**
          * The type of the FLD
          * @default undefined
         */
        "type": string;
    }
    interface KupForm {
        "actions": FormActions;
        "autocompleteCallBackOnFilterUpdate": (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        "cells": FormCells;
        "config": FormConfig;
        "crudCallBackOnFormActionSubmitted": (
        detail: FormActionEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "crudCallBackOnFormFieldChanged": (
        detail: FormFieldEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "extra": any;
        "extraMessages": FormMessage[];
        "fields": FormFields;
        "getActualCells": () => Promise<FormCells>;
        "getOldCells": () => Promise<FormCells>;
        "refid": string;
        "searchCallBackOnFilterSubmitted": (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        "sections": FormSection;
    }
    interface KupGauge {
        /**
          * Sets how much the arc of the gauge should be thick.
          * @namespace kup-gauge.arcThickness
          * @see kup-gauge.size
         */
        "arcThickness": number;
        /**
          * Array of three elements to specify the color of the arcs.
         */
        "colors": string[];
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * The first threshold, establishing the length of the first and second arc.
         */
        "firstThreshold"?: number;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The distance the label and the value has from the gauge graph.
         */
        "labelDistance": number;
        /**
          * The maximum value reachable in the current graph.
         */
        "maxValue": number;
        /**
          * A string which will be appended to the displayed values of the component.
         */
        "measurementUnit": string;
        /**
          * The minimum value reachable in the current graph.
         */
        "minValue": number;
        /**
          * When true, shows a rounded needle.
         */
        "needleCircle": boolean;
        /**
          * When true, ignore thresholds in gauge and show colored value's arc.
         */
        "onlyValue": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * When true, the colors inside the colors array are used in the reversed order.
         */
        "reverseColors": boolean;
        /**
          * The second threshold, establishing the length of the second and third arc.
         */
        "secondThreshold"?: number;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * If set to false, threshold values of the gauge are not displayed.
         */
        "showLabels": boolean;
        /**
          * If set to false, the maximum and minimum values of the gauge are not displayed.
         */
        "showMaxmin": boolean;
        /**
          * If set to false, the current value of the gauge is not displayed.
         */
        "showValue": boolean;
        /**
          * Con be used change the viewbox of the SVG. By manipulating this value, some customizations of the aspect of the gauge is achievable.
          * @namespace kup-gauge.size
          * @see kup-gauge.arcThickness
         */
        "size": number;
        /**
          * The current value of the gauge. The gauge's needle points to the percentage based on this prop.
         */
        "value": number;
        /**
          * The current size of gauge's value. Correct values are: 0,1,2 or 3.
         */
        "valueSize": number;
        /**
          * Set Width gauge.
         */
        "widthComponent": string;
    }
    interface KupGrid {
        /**
          * The number of columns displayed by the grid, the default behavior is 12.
          * @default 12
         */
        "columns": number;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * When set to true, forces the content on a single line.
          * @default false
         */
        "singleLine": boolean;
    }
    interface KupIframe {
        /**
          * Props of the button (when isButton is set to true).
         */
        "buttonData": Object;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The component will be rendered as a button, which opens the link associated to the iframe in another tab when clicked.
         */
        "isButton": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * The address the iframe should be referencing to.
         */
        "src": string;
    }
    interface KupImage {
        /**
          * Sets the data of badges.
          * @default null
         */
        "badgeData": KupBadge[];
        /**
          * The color of the icon, defaults to the CSS variable KupThemeColorValues.ICON.
          * @default KupThemeColorValues.ICON
         */
        "color": string;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * When present, the component will be drawn using CSS. Check the 'Drawing with CSS' section of the image showcase for more information.
          * @default null
         */
        "data": FImageData[];
        /**
          * When set to true, a spinner will be displayed until the image finished loading. Not compatible with SVGs.
          * @default false
         */
        "feedback": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The image component will create a canvas element on which it's possible to draw. It's a temporary feature that will be fully replaced by CSS drawing in the future.
          * @default false
         */
        "isCanvas": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * The resource used to fetch the image.
          * @default null
         */
        "resource": string;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * The width of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default '100%'
         */
        "sizeX": string;
        /**
          * The height of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default '100%'
         */
        "sizeY": string;
    }
    interface KupLayout {
        /**
          * Specifies how many columns the content must be organized onto.  If this is greater than 1, then the horizontal prop will have no effect.
         */
        "columnsNumber": number;
        /**
          * By default, columns size is calculated by the grid layout and it tries to give the same space to elements.  If this is true, columns width will be calculated according to the cells content. See SCSS file for more details.
         */
        "contentBasedColumnsWidth": boolean;
        /**
          * When true, the layout and its contents will try to take all the available horizontal space.
         */
        "fillSpace": boolean;
        /**
          * Tells the layout to place all elements onto a single row. It does not work when columnsNumber is greater then 1.
         */
        "horizontal": boolean;
    }
    interface KupLazy {
        /**
          * Sets the tag name of the component to be lazy loaded.
          * @default null
         */
        "componentName": string;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Sets the data of the component to be lazy loaded.
          * @default null
         */
        "data": GenericObject;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Decides when the sub-component should be rendered. By default when both the component props exist and the component is in the viewport.
          * @default KupLazyRender.BOTH
         */
        "renderMode": KupLazyRender;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Displays an animated SVG placeholder until the component is loaded.
          * @default true
         */
        "showPlaceholder": boolean;
    }
    interface KupList {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * The data of the list.
          * @default []
         */
        "data": KupListData[];
        /**
          * Selects how the items must display their label and how they can be filtered for.
          * @default ItemsDisplayMode.DESCRIPTION
         */
        "displayMode": ItemsDisplayMode;
        /**
          * Keeps string for filtering elements when filter mode is active
          * @default ''
         */
        "filter": string;
        /**
          * Focuses the next element of the list.
         */
        "focusNext": () => Promise<void>;
        /**
          * Focuses the previous element of the list.
         */
        "focusPrevious": () => Promise<void>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Hides rows' text, ideally to display a list of icons only.
          * @default false
         */
        "hideText": boolean;
        /**
          * Defines whether the list is a menu or not.
          * @default false
         */
        "isMenu": boolean;
        /**
          * When true, enables items' navigation through keys. Defaults to false when the component's isMenu prop is set to true.
          * @default undefined
         */
        "keyboardNavigation": boolean;
        /**
          * Sets the status of the menu, when false it's hidden otherwise it's visible.
          * @default false
         */
        "menuVisible": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Resets filter.
          * @todo FOSLUC to PASCAR: why isn't it enough to change only the prop?
         */
        "resetFilter": (newFilter: string) => Promise<void>;
        /**
          * Defines the type of selection. Values accepted: listbox, radiogroup or group.
          * @default KupListRole.LISTBOX
         */
        "roleType"?: KupListRole;
        /**
          * Calls handleSelection internal method to select the given item.
          * @param index - Based zero index of the item that must be selected, when not provided the list will attempt to select the focused element.
         */
        "select": (index?: number) => Promise<void>;
        /**
          * Defines whether items are selectable or not.
          * @default true
         */
        "selectable": boolean;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Displays the icons associated to each row when set to true.
          * @default false
         */
        "showIcons": boolean;
        /**
          * The list elements descriptions will be arranged in two lines.
          * @default false
         */
        "twoLine": boolean;
    }
    interface KupMagicBox {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Sets the data that will be used to display different components.
          * @default null
         */
        "data": MagicBoxData;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
    }
    interface KupModal {
        "header": string;
        "visible": boolean;
    }
    interface KupNavBar {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Image displayed by the nav bar, uses the kup-image component's props.
          * @default null
         */
        "image": FImageProps;
        /**
          * Text displayed by the nav bar.
          * @default null
         */
        "label": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * This method is invoked by KupManager whenever the component changes size.
         */
        "resizeCallback": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * When true, the menu button will be displayed on the left of the nav bar.
          * @default null
         */
        "showMenuButton": boolean;
        /**
          * Defines the style of the nav bar.
          * @default KupNavBarStyling.STANDARD
         */
        "styling": KupNavBarStyling;
    }
    interface KupPaginator {
        "currentPage": number;
        "max": number;
        "mode": PaginatorMode;
        "perPage": number;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        "selectedPerPage": number;
    }
    interface KupProbe {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Specify features to test.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "features": {
        debug: boolean;
        language: boolean;
        longCycleProp: boolean;
        longCycleVar: boolean;
        objects: boolean;
        objectsFunction: boolean;
        theme: boolean;
    };
        /**
          * This method is used to trigger a new render of the component.
         */
        "printLifecycleTime": () => Promise<{ id: string; featuresTime: number; fullTime: number; }>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KupProgressBar {
        /**
          * Displays the label in the middle of the progress bar. It's the default for the radial variant and can't be changed.
          * @default true
         */
        "centeredLabel": boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Flag to show or hide the progress bar's label.
          * @default false
         */
        "hideLabel": boolean;
        /**
          * Specifies an icon to replace the label.
          * @default null
         */
        "icon": string;
        /**
          * Radial version.
          * @default false
         */
        "isRadial": boolean;
        /**
          * Specifies a text for the bar's label.
          * @default null
         */
        "label": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * The current value the progress bar must display.
          * @default 0
         */
        "value": number;
    }
    interface KupQlik {
        /**
          * Set Qlik App's istance would you like to use (!!!ALLERT!!! if you have already set appid app's istance will be NOT generated again)
         */
        "app": any;
        /**
          * Set Qlik App's id would you like to use How to find app id --> https://support.qlik.com/articles/000026239
         */
        "appid": string;
        /**
          * Set gird border
         */
        "bordered": boolean;
        /**
          * Set Qlik Server's connection parameters MUST be delcared to open apps {host:'<server host>', port:'<server port http default:80 https default:443 >', prefix:'<virtual proxy prefix dafault: blank>', isSecure:<true/false>}
         */
        "config": QlikServer;
        /**
          * Activate logging Default false
         */
        "debug": boolean;
        /**
          * Set default obj's container pixel height
         */
        "defobjsize": string;
        /**
          * Define width of grid, with true width = 100% responsive, false 1200px
         */
        "fluid": boolean;
        /**
          * Set the grid structure (JSON) selections --> Data selection array    field   --> Qlik field on which to make the selection    values  --> Array of int or string value which to select rows    colums --> they define the structure of grid      obj     --> Qlik Object id would you like to render (How to find Qlik obj id --> https://help.qlik.com/en-US/sense-developer/June2020/Subsystems/Mashups/Content/Sense_Mashups/Howtos/mashups-obtain-app-object-id.htm)      colDim  --> define column's dimension, it could have values from 1 to 12 where 12 is 100%      size    --> define size height of obj's div container, it colud have this values XS|S|M|L|XL        noSelections --> define if selections in object are disable (default: false) Example: { selections:[  {      field: 'Anno',      values:[2020]  } ], rows:[  {    columns:[        {            obj:'KvqdmD', colDim:5, size:'L', noSelections:<true/flase>        },        {            obj:'JjSaVm', colDim:5, size:'S', noSelections:<true/flase>        }    ]  } ] }
         */
        "grid": Array<KupQlikGrid>;
        /**
          * Set Qlik Server istance would you like to use after connection
         */
        "qlik": any;
    }
    interface KupRadio {
        /**
          * Number of columns. When null, radio fields will be displayed inline.
          * @default null
         */
        "columns": number;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * List of elements.
          * @default null
         */
        "data": KupRadioData[];
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
    }
    interface KupRating {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Max number of stars (default 5).
          * @default 5
         */
        "maxValue": number;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Rated stars.
          * @default 0
         */
        "value": number;
    }
    interface KupSearch {
        "data": TableData;
        "disabled": boolean;
        "extra": any;
        "initialValue": string;
        /**
          * /** Function that can be invoked when the filter is submitted, but only if in serverHandledFilter mode. It returns the items filtered.
         */
        "searchCallBackOnFilterSubmitted": (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        /**
          * When true it emits events or makes available callbacks useful to obtain and filter data. When false the data inside data prop will be used and filtered in a static way.
         */
        "serverHandledFilter": boolean;
        /**
          * The field used to obtain value
         */
        "valueField": string;
    }
    interface KupSpinner {
        /**
          * When set to true the spinner is animating.
          * @default false
         */
        "active": boolean;
        /**
          * Decides whether the component is a bar or a spinner.
          * @default false
         */
        "barVariant": boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Width and height of the spinner. For the bar variant, only height.
          * @default false
         */
        "dimensions": string;
        /**
          * Places a blend modal over the wrapper to darken the view (or lighten, when the theme is dark).
          * @default false
         */
        "fader": boolean;
        /**
          * The time required for the "fader" to trigger.
          * @default 3500
         */
        "faderTimeout": number;
        /**
          * When set to true the component will fill the whole viewport.
          * @default false
         */
        "fullScreen": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Sets the layout of the spinner.
          * @default 1
         */
        "layout": number;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
    }
    interface KupSwitch {
        /**
          * Defaults at false. When set to true, the component will be set to 'checked'.
          * @default false
         */
        "checked": boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Defaults at null. When specified, its content will be shown as a label.
          * @default null
         */
        "label": string;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
    }
    interface KupTabBar {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * List of elements.
          * @default null
         */
        "data": KupTabBarData[];
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
    }
    interface KupTextField {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * When the text field is part of the autocomplete component and the list is opened, enter key selects the item and doesn't submit.
          * @default true
         */
        "emitSubmitEventOnEnter": boolean;
        /**
          * When set to true, the component will be rendered at full width.
          * @default false
         */
        "fullWidth": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Returns the component's internal value.
         */
        "getValue": () => Promise<string>;
        /**
          * When set, its content will be shown as a help text below the field.
          * @default null
         */
        "helper": string;
        /**
          * When set, the helper will be shown only when the field is focused.
          * @default false
         */
        "helperWhenFocused": boolean;
        /**
          * When set, the text-field will show this icon.
          * @default null
         */
        "icon": string;
        /**
          * Sets the initial value of the component
          * @default ""
         */
        "initialValue": string;
        /**
          * The HTML type of the input element. It has no effect on text areas.
          * @default "text"
         */
        "inputType": string;
        /**
          * Enables a clear trailing icon.
          * @default false
         */
        "isClearable": boolean;
        /**
          * When set, its content will be shown as a label.
          * @default null
         */
        "label": string;
        /**
          * When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel": boolean;
        /**
          * The HTML max attribute specifies the maximum value for the input element. Works with the following input types: number, range, date, datetime-local, month, time and week.
          * @default null
         */
        "max": number;
        /**
          * When set, the helper will display a character counter.
          * @default null
         */
        "maxLength": number;
        /**
          * The HTML min attribute specifies the minimum value for the input element. Works with the following input types: number, range, date, datetime-local, month, time and week.
          * @default null
         */
        "min": number;
        /**
          * When set to true, the component will be rendered as an outlined field.
          * @default false
         */
        "outlined": boolean;
        /**
          * Sets the component to read only state, making it not editable, but interactable. Used in combobox component when it behaves as a select.
          * @default false
         */
        "readOnly": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Focuses the input element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Sets the internal value of the component.
         */
        "setValue": (value: string) => Promise<void>;
        /**
          * The HTML step of the input element. It has effect only with number input type.
          * @default null
         */
        "step": number;
        /**
          * When set to true, the component will be rendered as a textarea.
          * @default false
         */
        "textArea": boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "trailingIcon": boolean;
        /**
          * When set to true, the label will be on the right of the component.
          * @default false
         */
        "trailingLabel": boolean;
    }
    interface KupTimePicker {
        /**
          * When set to true, the drop down menu will display a clock.
          * @default true
         */
        "clockVariant": boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the sub-components (time input text field)
          * @default {}
         */
        "data": Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Returns the component's internal value.
         */
        "getValue": () => Promise<string>;
        /**
          * Sets the initial value of the component.
          * @default ""
         */
        "initialValue": string;
        /**
          * Manage seconds.
          * @default false
         */
        "manageSeconds": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Focuses the input element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Sets the internal value of the component.
         */
        "setValue": (value: string) => Promise<void>;
        /**
          * Minutes step.
          * @default 10
         */
        "timeMinutesStep": number;
    }
    interface KupTooltip {
        /**
          * Data for cell options
         */
        "cellOptions": TooltipCellOptions;
        /**
          * Data for top section
         */
        "data": TooltipData;
        /**
          * Data for the detail
         */
        "detailData": TooltipDetailData;
        /**
          * Timeout for loadDetail
         */
        "detailTimeout": number;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Layout used to display the items
         */
        "layout": string;
        /**
          * Timeout for tooltip
         */
        "loadTimeout": number;
        /**
          * Owner of this tooltip
         */
        "owner": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Container element for tooltip
         */
        "relatedObject": TooltipRelatedObject;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        "setTooltipInfo": (relatedObject: TooltipRelatedObject) => Promise<void>;
        "unsetTooltipInfo": () => Promise<void>;
    }
    interface KupTree {
        /**
          * When enabled, the first level of depth will give an accordion look to nodes.
          * @default false
         */
        "asAccordion": boolean;
        /**
          * Auto select programmatic selectic node
         */
        "autoSelectionNodeMode": boolean;
        /**
          * Closes any opened column menu.
         */
        "closeColumnMenu": () => Promise<void>;
        /**
          * Collapses all nodes.
         */
        "collapseAll": () => Promise<void>;
        /**
          * The columns of the tree when tree visualization is active.
         */
        "columns"?: Column[];
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * The json data used to populate the tree view: the basic, always visible tree nodes.
         */
        "data": TreeNode[];
        /**
          * The density of the rows, defaults at 'medium' and can also be set to 'dense' or 'wide'.
         */
        "density": string;
        /**
          * Function that gets invoked when a new set of nodes must be loaded as children of a node.  When useDynamicExpansion is set, the tree component will have two different behaviors depending on the value of this prop. 1 - If this prop is set to null, no callback to download data is available:    the component will emit an event requiring the parent to load the children of the given node. 2 - If this prop is set to have a callback, then the component will automatically make requests to load children of    a given node. After the load has been completed, a different event will be fired to alert the parent of the change.
          * @see useDynamicExpansion
         */
        "dynamicExpansionCallback": (
        treeNodeToExpand: TreeNode,
        treeNodePath: TreeNodePath
    ) => Promise<TreeNode[]> | undefined;
        /**
          * Enables the extracolumns add buttons.
         */
        "enableExtraColumns": boolean;
        /**
          * Expands all nodes.
         */
        "expandAll": () => Promise<void>;
        /**
          * Flag: the nodes of the whole tree must be already expanded upon loading. Disabled nodes do NOT get expanded.
         */
        "expanded": boolean;
        /**
          * Behavior of nodes' expansion: it can be chosen between expanding a node by clicking on the dropdown icon, or by clicking on the whole node.
          * @default KupTreeExpansionMode.DROPDOWN
         */
        "expansionMode": KupTreeExpansionMode;
        /**
          * List of filters set by the user.
         */
        "filters": GenericFilter;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * When set to true it activates the global filter.
         */
        "globalFilter": boolean;
        /**
          * The mode of the global filter (default SIMPLE)
         */
        "globalFilterMode": KupGlobalFilterMode;
        /**
          * The value of the global filter.
         */
        "globalFilterValue": string;
        /**
          * True if there aren't visible nodes
         */
        "isEmpty": () => Promise<boolean>;
        /**
          * Opens the column menu of the given column.
          * @param column - Name of the column.
         */
        "openColumnMenu": (column: string) => Promise<void>;
        /**
          * Experimental feature: when active, the tree will try to prevent horizontal overflowing elements by setting a width on the content of the table cells. It works only on cells of the main column.
          * @default false;
         */
        "preventXScroll": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the possibility to remove the selected column.
         */
        "removableColumns": boolean;
        /**
          * This method is invoked by KupManager whenever the component changes size.
         */
        "resizeCallback": () => Promise<void>;
        /**
          * Activates the scroll on hover function.
         */
        "scrollOnHover": boolean;
        /**
          * An array of integers containing the path to a selected child.\ Groups up the properties SelFirst, SelItem, SelName.
         */
        "selectedNode": TreeNodePath;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
        /**
          * Shows the tree data as a table.
         */
        "showColumns": boolean;
        /**
          * When set to true enables the column filters.
         */
        "showFilters": boolean;
        /**
          * When set to true shows the footer.
         */
        "showFooter": boolean;
        /**
          * Flag: shows the header of the tree when the tree is displayed as a table.
          * @see showColumns
         */
        "showHeader": boolean;
        /**
          * Shows the icons of the nodes.
         */
        "showIcons": boolean;
        /**
          * If set to true, displays tooltip on right click; if set to false, displays tooltip on mouseOver.
         */
        "showTooltipOnRightClick": boolean;
        "stateId": string;
        "store": KupStore;
        /**
          * Defines the timeout for tooltip detail
         */
        "tooltipDetailTimeout": number;
        /**
          * Enable show tooltip
         */
        "tooltipEnabled": boolean;
        /**
          * Defines the timeout for tooltip load
         */
        "tooltipLoadTimeout": number;
        /**
          * Defines the current totals options.
         */
        "totals": TotalsMap;
        /**
          * When the component must use the dynamic expansion feature to open its nodes, it means that not all the nodes of the tree have been passed inside the data property.  Therefore, when expanding a node, the tree must emit an event (or run a given callback) and wait for the child nodes to be downloaded from the server.  For more information:
          * @see dynamicExpansionCallback
         */
        "useDynamicExpansion": boolean;
    }
}
declare global {
    interface HTMLKupAccordionElement extends Components.KupAccordion, HTMLStencilElement {
    }
    var HTMLKupAccordionElement: {
        prototype: HTMLKupAccordionElement;
        new (): HTMLKupAccordionElement;
    };
    interface HTMLKupAutocompleteElement extends Components.KupAutocomplete, HTMLStencilElement {
    }
    var HTMLKupAutocompleteElement: {
        prototype: HTMLKupAutocompleteElement;
        new (): HTMLKupAutocompleteElement;
    };
    interface HTMLKupBadgeElement extends Components.KupBadge, HTMLStencilElement {
    }
    var HTMLKupBadgeElement: {
        prototype: HTMLKupBadgeElement;
        new (): HTMLKupBadgeElement;
    };
    interface HTMLKupBoxElement extends Components.KupBox, HTMLStencilElement {
    }
    var HTMLKupBoxElement: {
        prototype: HTMLKupBoxElement;
        new (): HTMLKupBoxElement;
    };
    interface HTMLKupBpmnElement extends Components.KupBpmn, HTMLStencilElement {
    }
    var HTMLKupBpmnElement: {
        prototype: HTMLKupBpmnElement;
        new (): HTMLKupBpmnElement;
    };
    interface HTMLKupButtonElement extends Components.KupButton, HTMLStencilElement {
    }
    var HTMLKupButtonElement: {
        prototype: HTMLKupButtonElement;
        new (): HTMLKupButtonElement;
    };
    interface HTMLKupButtonListElement extends Components.KupButtonList, HTMLStencilElement {
    }
    var HTMLKupButtonListElement: {
        prototype: HTMLKupButtonListElement;
        new (): HTMLKupButtonListElement;
    };
    interface HTMLKupCalendarElement extends Components.KupCalendar, HTMLStencilElement {
    }
    var HTMLKupCalendarElement: {
        prototype: HTMLKupCalendarElement;
        new (): HTMLKupCalendarElement;
    };
    interface HTMLKupCardElement extends Components.KupCard, HTMLStencilElement {
    }
    var HTMLKupCardElement: {
        prototype: HTMLKupCardElement;
        new (): HTMLKupCardElement;
    };
    interface HTMLKupChartElement extends Components.KupChart, HTMLStencilElement {
    }
    var HTMLKupChartElement: {
        prototype: HTMLKupChartElement;
        new (): HTMLKupChartElement;
    };
    interface HTMLKupCheckboxElement extends Components.KupCheckbox, HTMLStencilElement {
    }
    var HTMLKupCheckboxElement: {
        prototype: HTMLKupCheckboxElement;
        new (): HTMLKupCheckboxElement;
    };
    interface HTMLKupChipElement extends Components.KupChip, HTMLStencilElement {
    }
    var HTMLKupChipElement: {
        prototype: HTMLKupChipElement;
        new (): HTMLKupChipElement;
    };
    interface HTMLKupColorPickerElement extends Components.KupColorPicker, HTMLStencilElement {
    }
    var HTMLKupColorPickerElement: {
        prototype: HTMLKupColorPickerElement;
        new (): HTMLKupColorPickerElement;
    };
    interface HTMLKupComboboxElement extends Components.KupCombobox, HTMLStencilElement {
    }
    var HTMLKupComboboxElement: {
        prototype: HTMLKupComboboxElement;
        new (): HTMLKupComboboxElement;
    };
    interface HTMLKupCrudElement extends Components.KupCrud, HTMLStencilElement {
    }
    var HTMLKupCrudElement: {
        prototype: HTMLKupCrudElement;
        new (): HTMLKupCrudElement;
    };
    interface HTMLKupDashElement extends Components.KupDash, HTMLStencilElement {
    }
    var HTMLKupDashElement: {
        prototype: HTMLKupDashElement;
        new (): HTMLKupDashElement;
    };
    interface HTMLKupDashListElement extends Components.KupDashList, HTMLStencilElement {
    }
    var HTMLKupDashListElement: {
        prototype: HTMLKupDashListElement;
        new (): HTMLKupDashListElement;
    };
    interface HTMLKupDataTableElement extends Components.KupDataTable, HTMLStencilElement {
    }
    var HTMLKupDataTableElement: {
        prototype: HTMLKupDataTableElement;
        new (): HTMLKupDataTableElement;
    };
    interface HTMLKupDatePickerElement extends Components.KupDatePicker, HTMLStencilElement {
    }
    var HTMLKupDatePickerElement: {
        prototype: HTMLKupDatePickerElement;
        new (): HTMLKupDatePickerElement;
    };
    interface HTMLKupDrawerElement extends Components.KupDrawer, HTMLStencilElement {
    }
    var HTMLKupDrawerElement: {
        prototype: HTMLKupDrawerElement;
        new (): HTMLKupDrawerElement;
    };
    interface HTMLKupDropdownButtonElement extends Components.KupDropdownButton, HTMLStencilElement {
    }
    var HTMLKupDropdownButtonElement: {
        prototype: HTMLKupDropdownButtonElement;
        new (): HTMLKupDropdownButtonElement;
    };
    interface HTMLKupEchartElement extends Components.KupEchart, HTMLStencilElement {
    }
    var HTMLKupEchartElement: {
        prototype: HTMLKupEchartElement;
        new (): HTMLKupEchartElement;
    };
    interface HTMLKupEditorElement extends Components.KupEditor, HTMLStencilElement {
    }
    var HTMLKupEditorElement: {
        prototype: HTMLKupEditorElement;
        new (): HTMLKupEditorElement;
    };
    interface HTMLKupFieldElement extends Components.KupField, HTMLStencilElement {
    }
    var HTMLKupFieldElement: {
        prototype: HTMLKupFieldElement;
        new (): HTMLKupFieldElement;
    };
    interface HTMLKupFormElement extends Components.KupForm, HTMLStencilElement {
    }
    var HTMLKupFormElement: {
        prototype: HTMLKupFormElement;
        new (): HTMLKupFormElement;
    };
    interface HTMLKupGaugeElement extends Components.KupGauge, HTMLStencilElement {
    }
    var HTMLKupGaugeElement: {
        prototype: HTMLKupGaugeElement;
        new (): HTMLKupGaugeElement;
    };
    interface HTMLKupGridElement extends Components.KupGrid, HTMLStencilElement {
    }
    var HTMLKupGridElement: {
        prototype: HTMLKupGridElement;
        new (): HTMLKupGridElement;
    };
    interface HTMLKupIframeElement extends Components.KupIframe, HTMLStencilElement {
    }
    var HTMLKupIframeElement: {
        prototype: HTMLKupIframeElement;
        new (): HTMLKupIframeElement;
    };
    interface HTMLKupImageElement extends Components.KupImage, HTMLStencilElement {
    }
    var HTMLKupImageElement: {
        prototype: HTMLKupImageElement;
        new (): HTMLKupImageElement;
    };
    interface HTMLKupLayoutElement extends Components.KupLayout, HTMLStencilElement {
    }
    var HTMLKupLayoutElement: {
        prototype: HTMLKupLayoutElement;
        new (): HTMLKupLayoutElement;
    };
    interface HTMLKupLazyElement extends Components.KupLazy, HTMLStencilElement {
    }
    var HTMLKupLazyElement: {
        prototype: HTMLKupLazyElement;
        new (): HTMLKupLazyElement;
    };
    interface HTMLKupListElement extends Components.KupList, HTMLStencilElement {
    }
    var HTMLKupListElement: {
        prototype: HTMLKupListElement;
        new (): HTMLKupListElement;
    };
    interface HTMLKupMagicBoxElement extends Components.KupMagicBox, HTMLStencilElement {
    }
    var HTMLKupMagicBoxElement: {
        prototype: HTMLKupMagicBoxElement;
        new (): HTMLKupMagicBoxElement;
    };
    interface HTMLKupModalElement extends Components.KupModal, HTMLStencilElement {
    }
    var HTMLKupModalElement: {
        prototype: HTMLKupModalElement;
        new (): HTMLKupModalElement;
    };
    interface HTMLKupNavBarElement extends Components.KupNavBar, HTMLStencilElement {
    }
    var HTMLKupNavBarElement: {
        prototype: HTMLKupNavBarElement;
        new (): HTMLKupNavBarElement;
    };
    interface HTMLKupPaginatorElement extends Components.KupPaginator, HTMLStencilElement {
    }
    var HTMLKupPaginatorElement: {
        prototype: HTMLKupPaginatorElement;
        new (): HTMLKupPaginatorElement;
    };
    interface HTMLKupProbeElement extends Components.KupProbe, HTMLStencilElement {
    }
    var HTMLKupProbeElement: {
        prototype: HTMLKupProbeElement;
        new (): HTMLKupProbeElement;
    };
    interface HTMLKupProgressBarElement extends Components.KupProgressBar, HTMLStencilElement {
    }
    var HTMLKupProgressBarElement: {
        prototype: HTMLKupProgressBarElement;
        new (): HTMLKupProgressBarElement;
    };
    interface HTMLKupQlikElement extends Components.KupQlik, HTMLStencilElement {
    }
    var HTMLKupQlikElement: {
        prototype: HTMLKupQlikElement;
        new (): HTMLKupQlikElement;
    };
    interface HTMLKupRadioElement extends Components.KupRadio, HTMLStencilElement {
    }
    var HTMLKupRadioElement: {
        prototype: HTMLKupRadioElement;
        new (): HTMLKupRadioElement;
    };
    interface HTMLKupRatingElement extends Components.KupRating, HTMLStencilElement {
    }
    var HTMLKupRatingElement: {
        prototype: HTMLKupRatingElement;
        new (): HTMLKupRatingElement;
    };
    interface HTMLKupSearchElement extends Components.KupSearch, HTMLStencilElement {
    }
    var HTMLKupSearchElement: {
        prototype: HTMLKupSearchElement;
        new (): HTMLKupSearchElement;
    };
    interface HTMLKupSpinnerElement extends Components.KupSpinner, HTMLStencilElement {
    }
    var HTMLKupSpinnerElement: {
        prototype: HTMLKupSpinnerElement;
        new (): HTMLKupSpinnerElement;
    };
    interface HTMLKupSwitchElement extends Components.KupSwitch, HTMLStencilElement {
    }
    var HTMLKupSwitchElement: {
        prototype: HTMLKupSwitchElement;
        new (): HTMLKupSwitchElement;
    };
    interface HTMLKupTabBarElement extends Components.KupTabBar, HTMLStencilElement {
    }
    var HTMLKupTabBarElement: {
        prototype: HTMLKupTabBarElement;
        new (): HTMLKupTabBarElement;
    };
    interface HTMLKupTextFieldElement extends Components.KupTextField, HTMLStencilElement {
    }
    var HTMLKupTextFieldElement: {
        prototype: HTMLKupTextFieldElement;
        new (): HTMLKupTextFieldElement;
    };
    interface HTMLKupTimePickerElement extends Components.KupTimePicker, HTMLStencilElement {
    }
    var HTMLKupTimePickerElement: {
        prototype: HTMLKupTimePickerElement;
        new (): HTMLKupTimePickerElement;
    };
    interface HTMLKupTooltipElement extends Components.KupTooltip, HTMLStencilElement {
    }
    var HTMLKupTooltipElement: {
        prototype: HTMLKupTooltipElement;
        new (): HTMLKupTooltipElement;
    };
    interface HTMLKupTreeElement extends Components.KupTree, HTMLStencilElement {
    }
    var HTMLKupTreeElement: {
        prototype: HTMLKupTreeElement;
        new (): HTMLKupTreeElement;
    };
    interface HTMLElementTagNameMap {
        "kup-accordion": HTMLKupAccordionElement;
        "kup-autocomplete": HTMLKupAutocompleteElement;
        "kup-badge": HTMLKupBadgeElement;
        "kup-box": HTMLKupBoxElement;
        "kup-bpmn": HTMLKupBpmnElement;
        "kup-button": HTMLKupButtonElement;
        "kup-button-list": HTMLKupButtonListElement;
        "kup-calendar": HTMLKupCalendarElement;
        "kup-card": HTMLKupCardElement;
        "kup-chart": HTMLKupChartElement;
        "kup-checkbox": HTMLKupCheckboxElement;
        "kup-chip": HTMLKupChipElement;
        "kup-color-picker": HTMLKupColorPickerElement;
        "kup-combobox": HTMLKupComboboxElement;
        "kup-crud": HTMLKupCrudElement;
        "kup-dash": HTMLKupDashElement;
        "kup-dash-list": HTMLKupDashListElement;
        "kup-data-table": HTMLKupDataTableElement;
        "kup-date-picker": HTMLKupDatePickerElement;
        "kup-drawer": HTMLKupDrawerElement;
        "kup-dropdown-button": HTMLKupDropdownButtonElement;
        "kup-echart": HTMLKupEchartElement;
        "kup-editor": HTMLKupEditorElement;
        "kup-field": HTMLKupFieldElement;
        "kup-form": HTMLKupFormElement;
        "kup-gauge": HTMLKupGaugeElement;
        "kup-grid": HTMLKupGridElement;
        "kup-iframe": HTMLKupIframeElement;
        "kup-image": HTMLKupImageElement;
        "kup-layout": HTMLKupLayoutElement;
        "kup-lazy": HTMLKupLazyElement;
        "kup-list": HTMLKupListElement;
        "kup-magic-box": HTMLKupMagicBoxElement;
        "kup-modal": HTMLKupModalElement;
        "kup-nav-bar": HTMLKupNavBarElement;
        "kup-paginator": HTMLKupPaginatorElement;
        "kup-probe": HTMLKupProbeElement;
        "kup-progress-bar": HTMLKupProgressBarElement;
        "kup-qlik": HTMLKupQlikElement;
        "kup-radio": HTMLKupRadioElement;
        "kup-rating": HTMLKupRatingElement;
        "kup-search": HTMLKupSearchElement;
        "kup-spinner": HTMLKupSpinnerElement;
        "kup-switch": HTMLKupSwitchElement;
        "kup-tab-bar": HTMLKupTabBarElement;
        "kup-text-field": HTMLKupTextFieldElement;
        "kup-time-picker": HTMLKupTimePickerElement;
        "kup-tooltip": HTMLKupTooltipElement;
        "kup-tree": HTMLKupTreeElement;
    }
}
declare namespace LocalJSX {
    interface KupAccordion {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Data of the accordion.
          * @default null
         */
        "data"?: KupAccordionData;
        /**
          * The mode of the expansion. If single you can't find more than one item expanded at a given time, if multiple you could.
          * @default KupAccordionExpansionMode.SINGLE
         */
        "expansionMode"?: KupAccordionExpansionMode;
        /**
          * When set to true it activates the global filter.
          * @default false
         */
        "globalFilter"?: boolean;
        /**
          * The mode of the global filter.
          * @default KupGlobalFilterMode.SIMPLE
         */
        "globalFilterMode"?: KupGlobalFilterMode;
        /**
          * The value of the global filter.
          * @default ""
         */
        "globalFilterValue"?: string;
        /**
          * Fired when an item is collapsed.
         */
        "onKup-accordion-itemcollapsed"?: (event: CustomEvent<KupAccordionItemCollapsedEventPayload>) => void;
        /**
          * Fired when an item is expanded.
         */
        "onKup-accordion-itemexpanded"?: (event: CustomEvent<KupAccordionItemExpandedEventPayload>) => void;
        /**
          * Fired when an item is selected.
         */
        "onKup-accordion-itemselected"?: (event: CustomEvent<KupAccordionItemSelectedEventPayload>) => void;
        /**
          * Fired when a TreeNode is collapsed.
         */
        "onKup-accordion-treenodecollapsed"?: (event: CustomEvent<KupAccordionTreeNodeCollapsedEventPayload>) => void;
        /**
          * Fired when a TreeNode is expanded.
         */
        "onKup-accordion-treenodeexpanded"?: (event: CustomEvent<KupAccordionTreeNodeExpandedEventPayload>) => void;
        /**
          * Fired when a TreeNode is selected.
         */
        "onKup-accordion-treenodeselected"?: (event: CustomEvent<KupAccordionTreeNodeSelectedEventPayload>) => void;
        /**
          * The names of the selected items.
          * @default []
         */
        "selectedItemsNames"?: string[];
    }
    interface KupAutocomplete {
        /**
          * Function that can be invoked when the filter is updated, but only if in serverHandledFilter mode. It returns the items filtered.
         */
        "callBackOnFilterUpdate"?: (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the sub-components.
         */
        "data"?: Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * Sets how to show the selected item value. Suported values: "code", "description", "both".
         */
        "displayMode"?: ItemsDisplayMode;
        /**
          * Sets the initial value of the component.
         */
        "initialValue"?: string;
        /**
          * The minimum number of chars to trigger the autocomplete
         */
        "minimumChars"?: number;
        "onKup-autocomplete-blur"?: (event: CustomEvent<KupAutocompleteEventPayload>) => void;
        "onKup-autocomplete-change"?: (event: CustomEvent<KupAutocompleteEventPayload>) => void;
        "onKup-autocomplete-click"?: (event: CustomEvent<KupAutocompleteEventPayload>) => void;
        "onKup-autocomplete-filterchanged"?: (event: CustomEvent<kupAutocompleteFilterChangedEventPayload>) => void;
        "onKup-autocomplete-focus"?: (event: CustomEvent<KupAutocompleteEventPayload>) => void;
        "onKup-autocomplete-iconclick"?: (event: CustomEvent<KupAutocompleteEventPayload>) => void;
        "onKup-autocomplete-input"?: (event: CustomEvent<KupAutocompleteEventPayload>) => void;
        "onKup-autocomplete-itemclick"?: (event: CustomEvent<KupAutocompleteEventPayload>) => void;
        /**
          * Sets how to return the selected item value. Suported values: "code", "description", "both".
         */
        "selectMode"?: ItemsDisplayMode;
        /**
          * When true, it will emit events to inform the listener of the change of the current filter value. Also the component builtin filter will be disabled.
         */
        "serverHandledFilter"?: boolean;
    }
    interface KupBadge {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The data of the image displayed inside the badge.
          * @default null
         */
        "imageData"?: GenericObject;
        "onKup-badge-click"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * The text displayed inside the badge.
          * @default null
         */
        "text"?: string;
    }
    interface KupBox {
        /**
          * Data of the card linked to the box when the latter's layout must be a premade template.
          * @default null
         */
        "cardData"?: GenericObject;
        /**
          * Number of columns
          * @default 1
         */
        "columns"?: number;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Actual data of the box.
          * @default null
         */
        "data"?: KupBoxData;
        /**
          * Enable dragging
          * @default false
         */
        "dragEnabled"?: boolean;
        /**
          * Enable dropping
          * @default false
         */
        "dropEnabled"?: boolean;
        /**
          * Drop can be done in section
          * @default false
         */
        "dropOnSection"?: boolean;
        /**
          * If enabled, a button to load / display the row actions will be displayed on the right of every box
          * @default false
         */
        "enableRowActions"?: boolean;
        /**
          * When set to true it activates the global filter.
          * @default false
         */
        "globalFilter"?: boolean;
        /**
          * The value of the global filter.
          * @default ""
         */
        "globalFilterValue"?: string;
        /**
          * Displays the boxlist as a Kanban.
          * @default null
         */
        "kanban"?: KupBoxKanban;
        /**
          * How the field will be displayed. If not present, a default one will be created.
          * @default undefined
         */
        "layout"?: KupBoxLayout;
        /**
          * Enable multi selection
          * @default false
         */
        "multiSelection"?: boolean;
        /**
          * Triggered when a box is auto selected via selectBox prop
         */
        "onKup-box-autoselect"?: (event: CustomEvent<KupBoxAutoSelectEventPayload>) => void;
        /**
          * Triggered when a box is clicked
         */
        "onKup-box-click"?: (event: CustomEvent<KupBoxClickEventPayload>) => void;
        /**
          * Generic right click event on box.
         */
        "onKup-box-contextmenu"?: (event: CustomEvent<KupBoxContextMenuEventPayload>) => void;
        "onKup-box-didload"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * Triggered when stop propagation event
         */
        "onKup-box-didunload"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * When the row menu action icon is click
         */
        "onKup-box-rowactionclick"?: (event: CustomEvent<KupBoxRowActionClickEventPayload>) => void;
        /**
          * When the row menu action icon is click
         */
        "onKup-box-rowactionmenuclick"?: (event: CustomEvent<KupBoxAutoSelectEventPayload>) => void;
        /**
          * Triggered when the multi selection checkbox changes value
         */
        "onKup-box-selected"?: (event: CustomEvent<KupBoxSelectedEventPayload>) => void;
        /**
          * Current page number
          * @default 1
         */
        "pageSelected"?: number;
        /**
          * Number of boxes per page
          * @default 10
         */
        "pageSize"?: number;
        /**
          * Enables pagination
          * @default false
         */
        "pagination"?: boolean;
        /**
          * Number of current rows per page
          * @default undefined
         */
        "rowsPerPage"?: number;
        /**
          * Activates the scroll on hover function.
          * @default false
         */
        "scrollOnHover"?: boolean;
        /**
          * Automatically selects the box at the specified index
          * @default undefined
         */
        "selectBox"?: number;
        /**
          * Multiple selection
          * @default undefined
         */
        "selectedRowsState"?: string;
        /**
          * If enabled, highlights the selected box/boxes
          * @default true
         */
        "showSelection"?: boolean;
        /**
          * If set to true, displays tooltip on right click; if set to false, displays tooltip on mouseOver.
          * @default true
         */
        "showTooltipOnRightClick"?: boolean;
        /**
          * If sorting is enabled, specifies which column to sort
          * @default undefined
         */
        "sortBy"?: string;
        /**
          * Enable sorting
          * @default false
         */
        "sortEnabled"?: boolean;
        "stateId"?: string;
        "store"?: KupStore;
        /**
          * Disable swipe
          * @default false
         */
        "swipeDisabled"?: boolean;
        /**
          * Defines the timeout for tooltip detail
          * @default undefined
         */
        "tooltipDetailTimeout"?: number;
        /**
          * Enable show tooltip
          * @default true
         */
        "tooltipEnabled"?: boolean;
        /**
          * Defines the timeout for tooltip load
          * @default undefined
         */
        "tooltipLoadTimeout"?: number;
    }
    interface KupBpmn {
        /**
          * When set to true, the diagram won't be interactive but it will displayed as an image.
          * @default false
         */
        "asImage"?: boolean;
    }
    interface KupButton {
        /**
          * When set to true, the icon button state will be on.
          * @default false
         */
        "checked"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * When set, the button will show this icon.
          * @default null
         */
        "icon"?: string;
        /**
          * When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
          * @default null
         */
        "iconOff"?: string;
        /**
          * When set, the button will show this text.
          * @default null
         */
        "label"?: string;
        /**
          * Triggered when the button loses focus.
         */
        "onKup-button-blur"?: (event: CustomEvent<KupButtonClickEventPayload>) => void;
        /**
          * Triggered when the button is clicked.
         */
        "onKup-button-click"?: (event: CustomEvent<KupButtonClickEventPayload>) => void;
        /**
          * Triggered when the button is focused.
         */
        "onKup-button-focus"?: (event: CustomEvent<KupButtonClickEventPayload>) => void;
        /**
          * Defines the style of the button. Styles available: "flat", "outlined" and "raised" which is also the default.
          * @default FButtonStyling.RAISED
         */
        "styling"?: FButtonStyling;
        /**
          * When set to true, the icon button will be toggable on/off.
          * @default false
         */
        "toggable"?: boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "trailingIcon"?: boolean;
    }
    interface KupButtonList {
        /**
          * Number of columns.
          * @default 0
         */
        "columns"?: number;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the sub-components.
          * @default []
         */
        "data"?: TreeNode[];
        /**
          * When set to true, the sub-components are disabled.
          * @default false
         */
        "disabled"?: boolean;
        "onKup-buttonlist-click"?: (event: CustomEvent<KupButtonListClickEventPayload>) => void;
        /**
          * When set to true, highlights the selected button with the secondary color of KupTheme.
          * @default true
         */
        "showSelection"?: boolean;
        /**
          * Defines the style of the buttons. Available styles are "flat", "outlined" and "raised" (which is the default).
          * @default FButtonStyling.RAISED
         */
        "styling"?: FButtonStyling;
    }
    interface KupCalendar {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Actual data of the calendar.
          * @default null
         */
        "data"?: TableData;
        /**
          * Column containing events' dates.
          * @default null
         */
        "dateCol"?: string;
        /**
          * Column containing events' descriptions.
          * @default null
         */
        "descrCol"?: string;
        /**
          * Column containing events' ending time.
          * @default null
         */
        "endCol"?: string;
        /**
          * When disabled, the navigation toolbar won't be displayed.
          * @default false
         */
        "hideNavigation"?: boolean;
        /**
          * Column containing events' icons. There can be multiple icons, divided by ";".
          * @default null
         */
        "iconCol"?: string;
        /**
          * Column containing events' images. There can be multiple images, divided by ";".
          * @default null
         */
        "imageCol"?: string;
        /**
          * Sets the initial date of the calendar. Must be in ISO format (YYYY-MM-DD).
          * @default null
         */
        "initialDate"?: string;
        /**
          * When a date is clicked.
         */
        "onKup-calendar-dateclick"?: (event: CustomEvent<KupCalendarDateClickEventPayload>) => void;
        /**
          * When an event is clicked.
         */
        "onKup-calendar-eventclick"?: (event: CustomEvent<KupCalendarEventClickEventPayload>) => void;
        /**
          * When a date is dropped.
         */
        "onKup-calendar-eventdrop"?: (event: CustomEvent<KupCalendarEventDropEventPayload>) => void;
        /**
          * When the navigation change
         */
        "onKup-calendar-viewchange"?: (event: CustomEvent<KupCalendarViewChangeEventPayload>) => void;
        /**
          * Column containing events' starting time.
          * @default null
         */
        "startCol"?: string;
        /**
          * Column containing events' CSS styles.
          * @default null
         */
        "styleCol"?: string;
        /**
          * Type of the view.
          * @default KupCalendarViewTypes.MONTH
         */
        "viewType"?: KupCalendarViewTypes;
    }
    interface KupCard {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The actual data of the card.
          * @default null
         */
        "data"?: KupCardData;
        /**
          * Defines whether the card is a menu or not. Works together with menuVisible.
          * @default false
         */
        "isMenu"?: boolean;
        /**
          * Sets the type of the card.
          * @default KupCardFamily.STANDARD
         */
        "layoutFamily"?: KupCardFamily;
        /**
          * Sets the number of the layout.
          * @default 1
         */
        "layoutNumber"?: number;
        /**
          * Sets the status of the card as menu, when false it's hidden otherwise it's visible. Works together with isMenu.
          * @default false
         */
        "menuVisible"?: boolean;
        /**
          * Triggered when the card is clicked.
         */
        "onKup-card-click"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * Triggered when a sub-component of the card emits an event.
         */
        "onKup-card-event"?: (event: CustomEvent<KupCardEventPayload>) => void;
        /**
          * The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "sizeX"?: string;
        /**
          * The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "sizeY"?: string;
    }
    interface KupChart {
        /**
          * Sets the chart to a 2D or 3D aspect. 3D only works for Pie graphs.
          * @default undefined
         */
        "asp"?: ChartAspect;
        /**
          * Sets the axis of the chart.
          * @default undefined
         */
        "axis"?: string;
        /**
          * Title of the graph.
          * @default undefined
         */
        "chartTitle"?: ChartTitle;
        /**
          * Colors of the chart.
          * @default []
         */
        "colors"?: string[];
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The actual data of the chart.
          * @default undefined
         */
        "data"?: DataTable;
        /**
          * Customize the hAxes for multiple-chart.
         */
        "hAxes"?: ChartAxis[];
        /**
          * Customize the hAxis.
          * @default undefined
         */
        "hAxis"?: ChartAxis;
        /**
          * Sets the position of the legend. Supported values: bottom, labeled, left, none, right, top. Keep in mind that legend types are tied to chart types, some combinations might not work.
          * @default "right"
         */
        "legend"?: string;
        /**
          * Renders charts without the Google API and using jQuery Sparkline.
          * @default undefined
         */
        "offlineMode"?: ChartOfflineMode;
        /**
          * Triggered when a chart serie is clicked
         */
        "onKup-chart-click"?: (event: CustomEvent<KupChartClickEvent>) => void;
        /**
          * The data series to be displayed. They must be of the same type.
          * @default undefined
         */
        "series"?: ChartSerie[];
        /**
          * Displays the numerical values.
          * @default false
         */
        "showMarks"?: boolean;
        /**
          * The width of the chart, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "sizeX"?: string;
        /**
          * The height of the chart, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "sizeY"?: string;
        /**
          * Used to sort series.
          * @default null
         */
        "sorting"?: KupChartSort[];
        /**
          * Displays the data columns of an object on top of each other.
         */
        "stacked"?: boolean;
        /**
          * KupChartTrendlines.
         */
        "trendlines"?: KupChartTrendlines;
        /**
          * The type of the chart. Supported formats: Area, Bubble, Cal, Candlestick, Combo, Geo, Hbar, Line, Ohlc, Pie, Sankey, Scatter, Unk, Vbar.
          * @default [ChartType.Hbar]
         */
        "types"?: ChartType[];
        /**
          * Customize the vAxes for multiple-chart.
         */
        "vAxes"?: ChartAxis[];
        /**
          * Customize the vAxis.
          * @default undefined
         */
        "vAxis"?: ChartAxis;
        /**
          * Google chart version to load
          * @default "45.2"
         */
        "version"?: string;
    }
    interface KupCheckbox {
        /**
          * Defaults at false. When set to true, the component will be set to 'checked'.
          * @default false
         */
        "checked"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * When set to true, the component will be set to 'indeterminate'.
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * When specified, its content will be shown as a label.
          * @default null
         */
        "label"?: string;
        /**
          * When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel"?: boolean;
        /**
          * Triggered when the input element loses focus.
         */
        "onKup-checkbox-blur"?: (event: CustomEvent<KupCheckboxEventPayload>) => void;
        /**
          * Triggered when the input element's value changes.
         */
        "onKup-checkbox-change"?: (event: CustomEvent<KupCheckboxEventPayload>) => void;
        /**
          * Triggered when the input element gets focused.
         */
        "onKup-checkbox-focus"?: (event: CustomEvent<KupCheckboxEventPayload>) => void;
    }
    interface KupChip {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * List of elements.
          * @default []
         */
        "data"?: FChipData[];
        /**
          * List of elements.
          * @default []
         */
        "dataNew"?: TreeNode[];
        /**
          * Triggered when a chip loses focus.
         */
        "onKup-chip-blur"?: (event: CustomEvent<KupChipEventPayload>) => void;
        /**
          * Triggered when a chip is clicked.
         */
        "onKup-chip-click"?: (event: CustomEvent<KupChipEventPayload>) => void;
        /**
          * Triggered when a chip gets focused.
         */
        "onKup-chip-focus"?: (event: CustomEvent<KupChipEventPayload>) => void;
        /**
          * Triggered when the removal icon on input chips is clicked.
         */
        "onKup-chip-iconclick"?: (event: CustomEvent<KupChipEventPayload>) => void;
        /**
          * The type of chip. Available types: input, filter, choice or empty for default.
          * @default FChipType.STANDARD
         */
        "type"?: FChipType;
    }
    interface KupColorPicker {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the text field.
          * @default null
         */
        "data"?: Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Sets the initial value of the component. Can be css color name, hex code or rgb code (sample: "red" or rgb(255, 0, 0) or "#FF0000" ).
          * @default ""
         */
        "initialValue"?: string;
        "onKup-colorpicker-change"?: (event: CustomEvent<KupColorPickerEventPayload>) => void;
        "onKup-colorpicker-input"?: (event: CustomEvent<KupColorPickerEventPayload>) => void;
        /**
          * When true, the component's text field will be replaced by a swatch.
          * @default false
         */
        "swatchOnly"?: boolean;
    }
    interface KupCombobox {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the sub-components (date input text field).
         */
        "data"?: Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * Sets how to show the selected item value. Suported values: "code", "description", "both".
         */
        "displayMode"?: ItemsDisplayMode;
        /**
          * Sets the initial value of the component
         */
        "initialValue"?: string;
        /**
          * Lets the combobox behave as a select element.
         */
        "isSelect"?: boolean;
        "onKup-combobox-blur"?: (event: CustomEvent<KupComboboxEventPayload>) => void;
        "onKup-combobox-change"?: (event: CustomEvent<KupComboboxEventPayload>) => void;
        "onKup-combobox-click"?: (event: CustomEvent<KupComboboxEventPayload>) => void;
        "onKup-combobox-focus"?: (event: CustomEvent<KupComboboxEventPayload>) => void;
        "onKup-combobox-iconclick"?: (event: CustomEvent<KupComboboxEventPayload>) => void;
        "onKup-combobox-input"?: (event: CustomEvent<KupComboboxEventPayload>) => void;
        "onKup-combobox-itemclick"?: (event: CustomEvent<KupComboboxEventPayload>) => void;
        "onKup-combobox-textfieldsubmit"?: (event: CustomEvent<KupComboboxEventPayload>) => void;
        /**
          * Sets how to return the selected item value. Suported values: "code", "description", "both".
         */
        "selectMode"?: ItemsDisplayMode;
    }
    interface KupCrud {
        "actions"?: FormActions;
        "autocompleteCallBackOnFilterUpdate"?: (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        "config"?: CrudConfig;
        "crudCallBackOnFormActionSubmitted"?: (
        detail: FormActionEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "crudCallBackOnFormFieldChanged"?: (
        detail: FormFieldEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "disabled"?: boolean;
        "extra"?: any;
        "extraMessages"?: FormMessage[];
        "fields"?: FormFields;
        "onKupCrudBlurred"?: (event: CustomEvent<any>) => void;
        "onKupCrudFocused"?: (event: CustomEvent<any>) => void;
        "onKupCrudFormActionSubmitted"?: (event: CustomEvent<FormActionEventDetail>) => void;
        "onKupCrudFormFieldChanged"?: (event: CustomEvent<FormFieldEventDetail>) => void;
        "onKupCrudRecordsChanged"?: (event: CustomEvent<CrudRecordsChanged>) => void;
        "records"?: CrudRecord[];
        "refid"?: string;
        "searchCallBackOnFilterSubmitted"?: (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        "sections"?: FormSection;
    }
    interface KupDash {
        /**
          * The component can be clicked.
         */
        "active"?: boolean;
        /**
          * Sets the font size of the component.
         */
        "fontsize"?: string;
        /**
          * No idea what this is about.
         */
        "index"?: number;
        /**
          * Sets the layout of the component.
         */
        "layout"?: string;
        "onKup-dash-click"?: (event: CustomEvent<{
        id: number;
    }>) => void;
    }
    interface KupDashList {
        "active"?: boolean;
        "columnsNumber"?: number;
        "data"?: TableData;
        "fontsize"?: string;
        "fullWidth"?: boolean;
        "horizontal"?: boolean;
        "iconColor"?: Array<any>;
        "layout"?: string;
        "onKup-dash-click"?: (event: CustomEvent<{
        idx: number;
    }>) => void;
        "textColor"?: Array<any>;
        "valueColor"?: Array<any>;
    }
    interface KupDataTable {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The data of the table.
         */
        "data"?: TableData;
        /**
          * The density of the rows, defaults at 'medium' and can be also set to 'large' or 'small'.
         */
        "density"?: string;
        /**
          * Enables drag.
         */
        "dragEnabled"?: boolean;
        /**
          * Enables drop.
         */
        "dropEnabled"?: boolean;
        /**
          * When set to true, editable cells will be rendered using input components.
          * @default false
         */
        "editableData"?: boolean;
        /**
          * Defines the label to show when the table is empty.
         */
        "emptyDataLabel"?: string;
        /**
          * Enables the extracolumns add buttons.
         */
        "enableExtraColumns"?: boolean;
        /**
          * Enables the sorting of columns by dragging them into different columns.
         */
        "enableSortableColumns"?: boolean;
        /**
          * Expands groups when set to true.
         */
        "expandGroups"?: boolean;
        /**
          * List of filters set by the user.
         */
        "filters"?: GenericFilter;
        /**
          * Fixes the given number of columns so that they stay visible when horizontally scrolling the data-table. If grouping is active or the value of the prop is <= 0, this prop will have no effect. Can be combined with fixedRows.
          * @see fixedRows
         */
        "fixedColumns"?: number;
        /**
          * Fixes the given number of rows so that they stay visible when vertically scrolling the data-table. If grouping is active or the value of the prop is <= 0, this prop will have no effect. Can be combined with fixedColumns.
          * @see fixedColumns
         */
        "fixedRows"?: number;
        /**
          * Forces cells with long text and a fixed column size to have an ellipsis set on their text. The reflect attribute is mandatory to allow styling.
         */
        "forceOneLine"?: boolean;
        /**
          * When set to true it activates the global filter.
         */
        "globalFilter"?: boolean;
        /**
          * The value of the global filter.
         */
        "globalFilterValue"?: string;
        /**
          * How the label of a group must be displayed. For available values [see here]{@link GroupLabelDisplayMode}
         */
        "groupLabelDisplay"?: GroupLabelDisplayMode;
        /**
          * The list of groups.
         */
        "groups"?: Array<GroupObject>;
        /**
          * When set to true the header will stick on top of the table when scrolling.
         */
        "headerIsPersistent"?: boolean;
        /**
          * When set to true, clicked-on rows will have a visual feedback.
          * @default false
         */
        "isFocusable"?: boolean;
        /**
          * When set to true, extra rows will be automatically loaded once the last row enters the viewport. When groups are present, the number of rows is referred to groups and not to their content. Paginator is disabled.
         */
        "lazyLoadRows"?: boolean;
        /**
          * Defines the placeholder character which will be replaced by a line break inside table header cells, normal or sticky.
         */
        "lineBreakCharacter"?: string;
        /**
          * Sets a maximum limit of new records which can be required by the load more functionality.
         */
        "loadMoreLimit"?: number;
        /**
          * Establish the modality of how many new records will be downloaded.  This property is regulated also by loadMoreStep.
          * @see loadMoreStep *
          * @see loadMoreLimit
         */
        "loadMoreMode"?: LoadMoreMode;
        /**
          * The number of records which will be requested to be downloaded when clicking on the load more button.  This property is regulated also by loadMoreMode.
          * @see loadMoreMode *
          * @see loadMoreLimit
         */
        "loadMoreStep"?: number;
        /**
          * When a row is auto selected via selectRow prop
         */
        "onKup-datatable-autorowselect"?: (event: CustomEvent<KupDatatableAutoRowSelectEventPayload>) => void;
        "onKup-datatable-cellbuttonclick"?: (event: CustomEvent<KupDataTableCellButtonClickEventPayload>) => void;
        /**
          * Emitted when a cell's data has been updated.
         */
        "onKup-datatable-cellupdate"?: (event: CustomEvent<KupDatatableCellUpdateEventPayload>) => void;
        /**
          * Generic click event on data table.
         */
        "onKup-datatable-click"?: (event: CustomEvent<KupDatatableClickEventPayload>) => void;
        /**
          * Emitted by the column menu card when opened/closed or when a kup-card-event is fired.
         */
        "onKup-datatable-columnmenu"?: (event: CustomEvent<KupDatatableColumnMenuEventPayload>) => void;
        /**
          * Generic right click event on data table.
         */
        "onKup-datatable-contextmenu"?: (event: CustomEvent<KupDatatableClickEventPayload>) => void;
        /**
          * Generic double click event on data table.
         */
        "onKup-datatable-dblclick"?: (event: CustomEvent<KupDatatableClickEventPayload>) => void;
        /**
          * When component load is complete
         */
        "onKup-datatable-didload"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * When component unload is complete
         */
        "onKup-datatable-didunload"?: (event: CustomEvent<KupEventPayload>) => void;
        "onKup-datatable-loadmoreclick"?: (event: CustomEvent<KupDatatableLoadMoreClickEventPayload>) => void;
        /**
          * When rows selections reset
         */
        "onKup-datatable-resetselectedrows"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * When a row action is clicked
         */
        "onKup-datatable-rowactionclick"?: (event: CustomEvent<KupDatatableRowActionClickEventPayload>) => void;
        /**
          * When a row is selected
         */
        "onKup-datatable-rowselected"?: (event: CustomEvent<KupDatatableRowSelectedEventPayload>) => void;
        "onKup-datatable-textfieldinput"?: (event: CustomEvent<KupDataTableCellTextFieldInputEventPayload>) => void;
        /**
          * Current selected page set on component load
         */
        "pageSelected"?: number;
        /**
          * Sets the position of the paginator. Available positions: top, bottom or both.
         */
        "paginatorPos"?: PaginatorPos;
        /**
          * Sets the possibility to remove the selected column.
         */
        "removableColumns"?: boolean;
        /**
          * Sets the actions of the rows.
         */
        "rowActions"?: Array<RowAction>;
        /**
          * Sets the number of rows per page to display.
         */
        "rowsPerPage"?: number;
        /**
          * Activates the scroll on hover function.
         */
        "scrollOnHover"?: boolean;
        /**
          * Selects the row at the specified rendered rows prosition (base 1).
         */
        "selectRow"?: number;
        /**
          * Semicolon separated rows id to select.
         */
        "selectRowsById"?: string;
        /**
          * Set the type of the rows selection.
         */
        "selection"?: SelectionMode;
        /**
          * If set to true, displays the button to open the customization panel.
         */
        "showCustomization"?: boolean;
        /**
          * When set to true enables the column filters.
         */
        "showFilters"?: boolean;
        /**
          * When set to true shows the footer.
         */
        "showFooter"?: boolean;
        /**
          * Can be used to customize the grid view of the table.
         */
        "showGrid"?: ShowGrid;
        /**
          * When set to true enables the column grouping.
         */
        "showGroups"?: boolean;
        /**
          * Enables rendering of the table header.
          * @namespace KupDataTable.showHeader
         */
        "showHeader"?: boolean;
        /**
          * If set to true, displays the button to load more records.
         */
        "showLoadMore"?: boolean;
        /**
          * If set to true, displays tooltip on right click; if set to false, displays tooltip on mouseOver.
         */
        "showTooltipOnRightClick"?: boolean;
        /**
          * Defines the current sorting options.
         */
        "sort"?: Array<SortObject>;
        /**
          * When set to true enables the sorting of the columns by clicking on the column header.
         */
        "sortEnabled"?: boolean;
        /**
          * If set to true, when a column is dragged to be sorted, the component directly mutates the data.columns property and then fires the event
         */
        "sortableColumnsMutateData"?: boolean;
        "stateId"?: string;
        "store"?: KupStore;
        /**
          * Sets the height of the table.
         */
        "tableHeight"?: string;
        /**
          * Sets the width of the table.
         */
        "tableWidth"?: string;
        /**
          * Defines the timeout for tooltip detail
         */
        "tooltipDetailTimeout"?: number;
        /**
          * Enable show tooltip
         */
        "tooltipEnabled"?: boolean;
        /**
          * Defines the timeout for tooltip load
         */
        "tooltipLoadTimeout"?: number;
        /**
          * Defines the current totals options
         */
        "totals"?: TotalsMap;
        /**
          * Transposes the data of the data table
         */
        "transpose"?: boolean;
    }
    interface KupDatePicker {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the sub-components.
          * @default null
         */
        "data"?: Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * First day number (0 - sunday, 1 - monday, ...)
          * @default 1
         */
        "firstDayIndex"?: number;
        /**
          * Sets the initial value of the component
          * @default ""
         */
        "initialValue"?: string;
        "onKup-datepicker-blur"?: (event: CustomEvent<KupDatePickerEventPayload>) => void;
        "onKup-datepicker-change"?: (event: CustomEvent<KupDatePickerEventPayload>) => void;
        "onKup-datepicker-cleariconclick"?: (event: CustomEvent<KupEventPayload>) => void;
        "onKup-datepicker-click"?: (event: CustomEvent<KupDatePickerEventPayload>) => void;
        "onKup-datepicker-focus"?: (event: CustomEvent<KupDatePickerEventPayload>) => void;
        "onKup-datepicker-iconclick"?: (event: CustomEvent<KupDatePickerEventPayload>) => void;
        "onKup-datepicker-input"?: (event: CustomEvent<KupDatePickerEventPayload>) => void;
        "onKup-datepicker-itemclick"?: (event: CustomEvent<KupDatePickerEventPayload>) => void;
        "onKup-datepicker-textfieldsubmit"?: (event: CustomEvent<KupDatePickerEventPayload>) => void;
    }
    interface KupDrawer {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Fired when the drawer gets closed.
         */
        "onKup-drawer-close"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * Fired when the drawer gets opened.
         */
        "onKup-drawer-open"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * Triggered when the component is ready.
         */
        "onKup-drawer-ready"?: (event: CustomEvent<KupEventPayload>) => void;
    }
    interface KupDropdownButton {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the sub-components.
          * @default null
         */
        "data"?: Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Sets how to show the selected item value. Suported values: "code", "description", "both".
          * @default ItemsDisplayMode.DESCRIPTION
         */
        "displayMode"?: ItemsDisplayMode;
        /**
          * Default value is false. When set to true, the arrow dropdown button is the only button displayed.
          * @default false
         */
        "dropdownOnly"?: boolean;
        /**
          * Defaults at null. When set, the button will show this icon.
          * @default icon
         */
        "icon"?: string;
        /**
          * Sets the initial value of the component.
          * @default ""
         */
        "initialValue"?: string;
        /**
          * Defaults at null. When set, the button will show this text.
          * @default ""
         */
        "label"?: string;
        /**
          * Triggered when the primary button loses focus.
         */
        "onKup-dropdownbutton-blur"?: (event: CustomEvent<KupDropdownButtonEventPayload>) => void;
        /**
          * Triggered when a list item changes.
         */
        "onKup-dropdownbutton-change"?: (event: CustomEvent<KupDropdownButtonEventPayload>) => void;
        /**
          * Triggered when the primary button is clicked.
         */
        "onKup-dropdownbutton-click"?: (event: CustomEvent<KupDropdownButtonEventPayload>) => void;
        /**
          * Triggered when the primary button is focused.
         */
        "onKup-dropdownbutton-focus"?: (event: CustomEvent<KupDropdownButtonEventPayload>) => void;
        /**
          * Triggered when a list item is clicked.
         */
        "onKup-dropdownbutton-itemclick"?: (event: CustomEvent<KupDropdownButtonEventPayload>) => void;
        /**
          * Sets how to return the selected item value. Suported values: "code", "description", "both".
          * @default ItemsDisplayMode.CODE
         */
        "selectMode"?: ItemsDisplayMode;
        /**
          * Defines the style of the button. Styles available: "flat", "outlined" and "raised" which is also the default.
          * @default FButtonStyling.RAISED
         */
        "styling"?: FButtonStyling;
        /**
          * Defaults at null. When set, the icon will be shown after the text.
          * @default false
         */
        "trailingIcon"?: boolean;
    }
    interface KupEchart {
        /**
          * Sets the axis of the chart.
          * @default ""
         */
        "axis"?: string;
        /**
          * Title of the graph.
          * @default undefined
         */
        "chartTitle"?: KupEchartTitle;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The actual data of the chart.
          * @default {}
         */
        "data"?: object;
        /**
          * Sets the position of the legend. Supported values: bottom, left, right, top. Keep in mind that legend types are tied to chart types, some combinations might not work.
          * @default undefined
         */
        "legend"?: string;
        /**
          * Choose which map you want to view, supported values: "europe", "africa", "asia", "oceania", "america" and "world". You can also provide your own JSON.
          * @default undefined
         */
        "mapType"?: any;
        "onKup-echart-click"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * The data series to be displayed. They must be of the same type.
          * @default undefined
         */
        "series"?: string[];
        /**
          * The type of the chart. Supported formats: Line, Pie, Map, Scatter
          * @default ['Line']
         */
        "types"?: String[];
    }
    interface KupEditor {
        /**
          * The html to be rendered and edited
         */
        "text"?: string;
    }
    interface KupField {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Effective data to pass to the component.
          * @default {}
         */
        "data"?: Object;
        /**
          * The text of the label. If set to empty or has only white space chars, the label will be removed.
          * @default ""
         */
        "label"?: string;
        /**
          * Sets the label's position, left right or top.
          * @default "left"
         */
        "labelPos"?: string;
        /**
          * Launched when the value of the current FLD changes.
         */
        "onKup-field-change"?: (event: CustomEvent<KupFieldChangeEvent>) => void;
        /**
          * Launched when the FLD values are confirmed and a submit event is triggered.
         */
        "onKup-field-submit"?: (event: CustomEvent<KupFieldSubmitEvent>) => void;
        /**
          * Sets whether the submit button must be displayed or not.
          * @default false
         */
        "showSubmit"?: boolean;
        /**
          * Sets the submit button's label.
          * @default ""
         */
        "submitLabel"?: string;
        /**
          * Sets the submit button's position, top right bottom or left.
          * @default "right"
         */
        "submitPos"?: string;
        /**
          * The type of the FLD
          * @default undefined
         */
        "type"?: string;
    }
    interface KupForm {
        "actions"?: FormActions;
        "autocompleteCallBackOnFilterUpdate"?: (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        "cells"?: FormCells;
        "config"?: FormConfig;
        "crudCallBackOnFormActionSubmitted"?: (
        detail: FormActionEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "crudCallBackOnFormFieldChanged"?: (
        detail: FormFieldEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "extra"?: any;
        "extraMessages"?: FormMessage[];
        "fields"?: FormFields;
        "onKup-form-actionsubmitted"?: (event: CustomEvent<FormActionEventDetail>) => void;
        "onKup-form-fieldblurred"?: (event: CustomEvent<FormFieldEventDetail>) => void;
        "onKup-form-fieldchanged"?: (event: CustomEvent<FormFieldEventDetail>) => void;
        "onKup-form-fieldfocused"?: (event: CustomEvent<FormFieldEventDetail>) => void;
        "refid"?: string;
        "searchCallBackOnFilterSubmitted"?: (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        "sections"?: FormSection;
    }
    interface KupGauge {
        /**
          * Sets how much the arc of the gauge should be thick.
          * @namespace kup-gauge.arcThickness
          * @see kup-gauge.size
         */
        "arcThickness"?: number;
        /**
          * Array of three elements to specify the color of the arcs.
         */
        "colors"?: string[];
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The first threshold, establishing the length of the first and second arc.
         */
        "firstThreshold"?: number;
        /**
          * The distance the label and the value has from the gauge graph.
         */
        "labelDistance"?: number;
        /**
          * The maximum value reachable in the current graph.
         */
        "maxValue"?: number;
        /**
          * A string which will be appended to the displayed values of the component.
         */
        "measurementUnit"?: string;
        /**
          * The minimum value reachable in the current graph.
         */
        "minValue"?: number;
        /**
          * When true, shows a rounded needle.
         */
        "needleCircle"?: boolean;
        /**
          * When true, ignore thresholds in gauge and show colored value's arc.
         */
        "onlyValue"?: boolean;
        /**
          * When true, the colors inside the colors array are used in the reversed order.
         */
        "reverseColors"?: boolean;
        /**
          * The second threshold, establishing the length of the second and third arc.
         */
        "secondThreshold"?: number;
        /**
          * If set to false, threshold values of the gauge are not displayed.
         */
        "showLabels"?: boolean;
        /**
          * If set to false, the maximum and minimum values of the gauge are not displayed.
         */
        "showMaxmin"?: boolean;
        /**
          * If set to false, the current value of the gauge is not displayed.
         */
        "showValue"?: boolean;
        /**
          * Con be used change the viewbox of the SVG. By manipulating this value, some customizations of the aspect of the gauge is achievable.
          * @namespace kup-gauge.size
          * @see kup-gauge.arcThickness
         */
        "size"?: number;
        /**
          * The current value of the gauge. The gauge's needle points to the percentage based on this prop.
         */
        "value"?: number;
        /**
          * The current size of gauge's value. Correct values are: 0,1,2 or 3.
         */
        "valueSize"?: number;
        /**
          * Set Width gauge.
         */
        "widthComponent"?: string;
    }
    interface KupGrid {
        /**
          * The number of columns displayed by the grid, the default behavior is 12.
          * @default 12
         */
        "columns"?: number;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * When set to true, forces the content on a single line.
          * @default false
         */
        "singleLine"?: boolean;
    }
    interface KupIframe {
        /**
          * Props of the button (when isButton is set to true).
         */
        "buttonData"?: Object;
        /**
          * The component will be rendered as a button, which opens the link associated to the iframe in another tab when clicked.
         */
        "isButton"?: boolean;
        "onKup-iframe-error"?: (event: CustomEvent<KupEventPayload>) => void;
        "onKup-iframe-load"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * The address the iframe should be referencing to.
         */
        "src"?: string;
    }
    interface KupImage {
        /**
          * Sets the data of badges.
          * @default null
         */
        "badgeData"?: KupBadge[];
        /**
          * The color of the icon, defaults to the CSS variable KupThemeColorValues.ICON.
          * @default KupThemeColorValues.ICON
         */
        "color"?: string;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * When present, the component will be drawn using CSS. Check the 'Drawing with CSS' section of the image showcase for more information.
          * @default null
         */
        "data"?: FImageData[];
        /**
          * When set to true, a spinner will be displayed until the image finished loading. Not compatible with SVGs.
          * @default false
         */
        "feedback"?: boolean;
        /**
          * The image component will create a canvas element on which it's possible to draw. It's a temporary feature that will be fully replaced by CSS drawing in the future.
          * @default false
         */
        "isCanvas"?: boolean;
        "onKup-image-click"?: (event: CustomEvent<KupImageClickEventPayload>) => void;
        /**
          * The resource used to fetch the image.
          * @default null
         */
        "resource"?: string;
        /**
          * The width of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default '100%'
         */
        "sizeX"?: string;
        /**
          * The height of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default '100%'
         */
        "sizeY"?: string;
    }
    interface KupLayout {
        /**
          * Specifies how many columns the content must be organized onto.  If this is greater than 1, then the horizontal prop will have no effect.
         */
        "columnsNumber"?: number;
        /**
          * By default, columns size is calculated by the grid layout and it tries to give the same space to elements.  If this is true, columns width will be calculated according to the cells content. See SCSS file for more details.
         */
        "contentBasedColumnsWidth"?: boolean;
        /**
          * When true, the layout and its contents will try to take all the available horizontal space.
         */
        "fillSpace"?: boolean;
        /**
          * Tells the layout to place all elements onto a single row. It does not work when columnsNumber is greater then 1.
         */
        "horizontal"?: boolean;
    }
    interface KupLazy {
        /**
          * Sets the tag name of the component to be lazy loaded.
          * @default null
         */
        "componentName"?: string;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Sets the data of the component to be lazy loaded.
          * @default null
         */
        "data"?: GenericObject;
        /**
          * Decides when the sub-component should be rendered. By default when both the component props exist and the component is in the viewport.
          * @default KupLazyRender.BOTH
         */
        "renderMode"?: KupLazyRender;
        /**
          * Displays an animated SVG placeholder until the component is loaded.
          * @default true
         */
        "showPlaceholder"?: boolean;
    }
    interface KupList {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The data of the list.
          * @default []
         */
        "data"?: KupListData[];
        /**
          * Selects how the items must display their label and how they can be filtered for.
          * @default ItemsDisplayMode.DESCRIPTION
         */
        "displayMode"?: ItemsDisplayMode;
        /**
          * Keeps string for filtering elements when filter mode is active
          * @default ''
         */
        "filter"?: string;
        /**
          * Hides rows' text, ideally to display a list of icons only.
          * @default false
         */
        "hideText"?: boolean;
        /**
          * Defines whether the list is a menu or not.
          * @default false
         */
        "isMenu"?: boolean;
        /**
          * When true, enables items' navigation through keys. Defaults to false when the component's isMenu prop is set to true.
          * @default undefined
         */
        "keyboardNavigation"?: boolean;
        /**
          * Sets the status of the menu, when false it's hidden otherwise it's visible.
          * @default false
         */
        "menuVisible"?: boolean;
        "onKup-list-blur"?: (event: CustomEvent<KupEventPayload>) => void;
        "onKup-list-click"?: (event: CustomEvent<KupListEventPayload>) => void;
        "onKup-list-focus"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * Defines the type of selection. Values accepted: listbox, radiogroup or group.
          * @default KupListRole.LISTBOX
         */
        "roleType"?: KupListRole;
        /**
          * Defines whether items are selectable or not.
          * @default true
         */
        "selectable"?: boolean;
        /**
          * Displays the icons associated to each row when set to true.
          * @default false
         */
        "showIcons"?: boolean;
        /**
          * The list elements descriptions will be arranged in two lines.
          * @default false
         */
        "twoLine"?: boolean;
    }
    interface KupMagicBox {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Sets the data that will be used to display different components.
          * @default null
         */
        "data"?: MagicBoxData;
    }
    interface KupModal {
        "header"?: string;
        "onKupModalCancel"?: (event: CustomEvent<any>) => void;
        "visible"?: boolean;
    }
    interface KupNavBar {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Image displayed by the nav bar, uses the kup-image component's props.
          * @default null
         */
        "image"?: FImageProps;
        /**
          * Text displayed by the nav bar.
          * @default null
         */
        "label"?: string;
        /**
          * Triggered when the menu button is clicked.
         */
        "onKup-navbar-menuclick"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * Triggered when the component is ready.
         */
        "onKup-navbar-ready"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * Triggered when the component is resize.
         */
        "onKup-navbar-resize"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * When true, the menu button will be displayed on the left of the nav bar.
          * @default null
         */
        "showMenuButton"?: boolean;
        /**
          * Defines the style of the nav bar.
          * @default KupNavBarStyling.STANDARD
         */
        "styling"?: KupNavBarStyling;
    }
    interface KupPaginator {
        "currentPage"?: number;
        "max"?: number;
        "mode"?: PaginatorMode;
        /**
          * When the current page change
         */
        "onKup-paginator-pagechanged"?: (event: CustomEvent<KupPaginatorPageChangedEventPayload>) => void;
        /**
          * When the rows per page change
         */
        "onKup-paginator-rowsperpagechanged"?: (event: CustomEvent<KupPaginatorRowsPerPageChangedEventPayload>) => void;
        "perPage"?: number;
        "selectedPerPage"?: number;
    }
    interface KupProbe {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Specify features to test.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "features"?: {
        debug: boolean;
        language: boolean;
        longCycleProp: boolean;
        longCycleVar: boolean;
        objects: boolean;
        objectsFunction: boolean;
        theme: boolean;
    };
    }
    interface KupProgressBar {
        /**
          * Displays the label in the middle of the progress bar. It's the default for the radial variant and can't be changed.
          * @default true
         */
        "centeredLabel"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Flag to show or hide the progress bar's label.
          * @default false
         */
        "hideLabel"?: boolean;
        /**
          * Specifies an icon to replace the label.
          * @default null
         */
        "icon"?: string;
        /**
          * Radial version.
          * @default false
         */
        "isRadial"?: boolean;
        /**
          * Specifies a text for the bar's label.
          * @default null
         */
        "label"?: string;
        /**
          * The current value the progress bar must display.
          * @default 0
         */
        "value"?: number;
    }
    interface KupQlik {
        /**
          * Set Qlik App's istance would you like to use (!!!ALLERT!!! if you have already set appid app's istance will be NOT generated again)
         */
        "app"?: any;
        /**
          * Set Qlik App's id would you like to use How to find app id --> https://support.qlik.com/articles/000026239
         */
        "appid"?: string;
        /**
          * Set gird border
         */
        "bordered"?: boolean;
        /**
          * Set Qlik Server's connection parameters MUST be delcared to open apps {host:'<server host>', port:'<server port http default:80 https default:443 >', prefix:'<virtual proxy prefix dafault: blank>', isSecure:<true/false>}
         */
        "config"?: QlikServer;
        /**
          * Activate logging Default false
         */
        "debug"?: boolean;
        /**
          * Set default obj's container pixel height
         */
        "defobjsize"?: string;
        /**
          * Define width of grid, with true width = 100% responsive, false 1200px
         */
        "fluid"?: boolean;
        /**
          * Set the grid structure (JSON) selections --> Data selection array    field   --> Qlik field on which to make the selection    values  --> Array of int or string value which to select rows    colums --> they define the structure of grid      obj     --> Qlik Object id would you like to render (How to find Qlik obj id --> https://help.qlik.com/en-US/sense-developer/June2020/Subsystems/Mashups/Content/Sense_Mashups/Howtos/mashups-obtain-app-object-id.htm)      colDim  --> define column's dimension, it could have values from 1 to 12 where 12 is 100%      size    --> define size height of obj's div container, it colud have this values XS|S|M|L|XL        noSelections --> define if selections in object are disable (default: false) Example: { selections:[  {      field: 'Anno',      values:[2020]  } ], rows:[  {    columns:[        {            obj:'KvqdmD', colDim:5, size:'L', noSelections:<true/flase>        },        {            obj:'JjSaVm', colDim:5, size:'S', noSelections:<true/flase>        }    ]  } ] }
         */
        "grid"?: Array<KupQlikGrid>;
        /**
          * Set Qlik Server istance would you like to use after connection
         */
        "qlik"?: any;
    }
    interface KupRadio {
        /**
          * Number of columns. When null, radio fields will be displayed inline.
          * @default null
         */
        "columns"?: number;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * List of elements.
          * @default null
         */
        "data"?: KupRadioData[];
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel"?: boolean;
        /**
          * Triggered when the input element loses focus.
         */
        "onKup-radio-blur"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * Triggered when the input element's value changes.
         */
        "onKup-radio-change"?: (event: CustomEvent<KupRadioChangeEventPayload>) => void;
        /**
          * Triggered when the input element gets focused.
         */
        "onKup-radio-focus"?: (event: CustomEvent<KupEventPayload>) => void;
    }
    interface KupRating {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Max number of stars (default 5).
          * @default 5
         */
        "maxValue"?: number;
        "onKupRatingClick"?: (event: CustomEvent<KupRatingClickEventPayload>) => void;
        /**
          * Rated stars.
          * @default 0
         */
        "value"?: number;
    }
    interface KupSearch {
        "data"?: TableData;
        "disabled"?: boolean;
        "extra"?: any;
        "initialValue"?: string;
        /**
          * Fired when the filter is submitted but only if in serverHandledFilter mode.
         */
        "onKupSearchFilterSubmitted"?: (event: CustomEvent<SearchFilterSubmittedEventDetail>) => void;
        "onKupSearchSelectionUpdated"?: (event: CustomEvent<SearchSelectionUpdatedEventDetail>) => void;
        /**
          * /** Function that can be invoked when the filter is submitted, but only if in serverHandledFilter mode. It returns the items filtered.
         */
        "searchCallBackOnFilterSubmitted"?: (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        /**
          * When true it emits events or makes available callbacks useful to obtain and filter data. When false the data inside data prop will be used and filtered in a static way.
         */
        "serverHandledFilter"?: boolean;
        /**
          * The field used to obtain value
         */
        "valueField"?: string;
    }
    interface KupSpinner {
        /**
          * When set to true the spinner is animating.
          * @default false
         */
        "active"?: boolean;
        /**
          * Decides whether the component is a bar or a spinner.
          * @default false
         */
        "barVariant"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Width and height of the spinner. For the bar variant, only height.
          * @default false
         */
        "dimensions"?: string;
        /**
          * Places a blend modal over the wrapper to darken the view (or lighten, when the theme is dark).
          * @default false
         */
        "fader"?: boolean;
        /**
          * The time required for the "fader" to trigger.
          * @default 3500
         */
        "faderTimeout"?: number;
        /**
          * When set to true the component will fill the whole viewport.
          * @default false
         */
        "fullScreen"?: boolean;
        /**
          * Sets the layout of the spinner.
          * @default 1
         */
        "layout"?: number;
        /**
          * Triggered when the component is ready.
         */
        "onKup-spinner-ready"?: (event: CustomEvent<KupEventPayload>) => void;
    }
    interface KupSwitch {
        /**
          * Defaults at false. When set to true, the component will be set to 'checked'.
          * @default false
         */
        "checked"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Defaults at null. When specified, its content will be shown as a label.
          * @default null
         */
        "label"?: string;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel"?: boolean;
        /**
          * Triggered when the input element loses focus.
         */
        "onKup-switch-blur"?: (event: CustomEvent<KupSwitchEventPayload>) => void;
        /**
          * Triggered when the input element's value changes.
         */
        "onKup-switch-change"?: (event: CustomEvent<KupSwitchEventPayload>) => void;
        /**
          * Triggered when the input element gets focused.
         */
        "onKup-switch-focus"?: (event: CustomEvent<KupSwitchEventPayload>) => void;
    }
    interface KupTabBar {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * List of elements.
          * @default null
         */
        "data"?: KupTabBarData[];
        /**
          * Triggered when the tab loses focus.
         */
        "onKup-tabbar-blur"?: (event: CustomEvent<KupTabBarEventPayload>) => void;
        /**
          * Triggered when the tab is clicked.
         */
        "onKup-tabbar-click"?: (event: CustomEvent<KupTabBarClickEventPayload>) => void;
        /**
          * Triggered when the tab is focused.
         */
        "onKup-tabbar-focus"?: (event: CustomEvent<KupTabBarEventPayload>) => void;
    }
    interface KupTextField {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * When the text field is part of the autocomplete component and the list is opened, enter key selects the item and doesn't submit.
          * @default true
         */
        "emitSubmitEventOnEnter"?: boolean;
        /**
          * When set to true, the component will be rendered at full width.
          * @default false
         */
        "fullWidth"?: boolean;
        /**
          * When set, its content will be shown as a help text below the field.
          * @default null
         */
        "helper"?: string;
        /**
          * When set, the helper will be shown only when the field is focused.
          * @default false
         */
        "helperWhenFocused"?: boolean;
        /**
          * When set, the text-field will show this icon.
          * @default null
         */
        "icon"?: string;
        /**
          * Sets the initial value of the component
          * @default ""
         */
        "initialValue"?: string;
        /**
          * The HTML type of the input element. It has no effect on text areas.
          * @default "text"
         */
        "inputType"?: string;
        /**
          * Enables a clear trailing icon.
          * @default false
         */
        "isClearable"?: boolean;
        /**
          * When set, its content will be shown as a label.
          * @default null
         */
        "label"?: string;
        /**
          * When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel"?: boolean;
        /**
          * The HTML max attribute specifies the maximum value for the input element. Works with the following input types: number, range, date, datetime-local, month, time and week.
          * @default null
         */
        "max"?: number;
        /**
          * When set, the helper will display a character counter.
          * @default null
         */
        "maxLength"?: number;
        /**
          * The HTML min attribute specifies the minimum value for the input element. Works with the following input types: number, range, date, datetime-local, month, time and week.
          * @default null
         */
        "min"?: number;
        /**
          * Triggered when the input element loses focus.
         */
        "onKup-textfield-blur"?: (event: CustomEvent<KupTextFieldEventPayload>) => void;
        /**
          * Triggered when the input element changes.
         */
        "onKup-textfield-change"?: (event: CustomEvent<KupTextFieldEventPayload>) => void;
        /**
          * Triggered when the text field's clear icon is clicked.
         */
        "onKup-textfield-cleariconclick"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * Triggered when the input element is clicked.
         */
        "onKup-textfield-click"?: (event: CustomEvent<KupTextFieldEventPayload>) => void;
        /**
          * Triggered when the input element gets focused.
         */
        "onKup-textfield-focus"?: (event: CustomEvent<KupTextFieldEventPayload>) => void;
        /**
          * Triggered when the text field's icon is clicked.
         */
        "onKup-textfield-iconclick"?: (event: CustomEvent<KupTextFieldEventPayload>) => void;
        /**
          * Triggered when the input element receives an input.
         */
        "onKup-textfield-input"?: (event: CustomEvent<KupTextFieldEventPayload>) => void;
        /**
          * Triggered when the Enter key is pressed.
         */
        "onKup-textfield-submit"?: (event: CustomEvent<KupTextFieldEventPayload>) => void;
        /**
          * When set to true, the component will be rendered as an outlined field.
          * @default false
         */
        "outlined"?: boolean;
        /**
          * Sets the component to read only state, making it not editable, but interactable. Used in combobox component when it behaves as a select.
          * @default false
         */
        "readOnly"?: boolean;
        /**
          * The HTML step of the input element. It has effect only with number input type.
          * @default null
         */
        "step"?: number;
        /**
          * When set to true, the component will be rendered as a textarea.
          * @default false
         */
        "textArea"?: boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "trailingIcon"?: boolean;
        /**
          * When set to true, the label will be on the right of the component.
          * @default false
         */
        "trailingLabel"?: boolean;
    }
    interface KupTimePicker {
        /**
          * When set to true, the drop down menu will display a clock.
          * @default true
         */
        "clockVariant"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the sub-components (time input text field)
          * @default {}
         */
        "data"?: Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Sets the initial value of the component.
          * @default ""
         */
        "initialValue"?: string;
        /**
          * Manage seconds.
          * @default false
         */
        "manageSeconds"?: boolean;
        "onKup-timepicker-blur"?: (event: CustomEvent<KupTimePickerEventPayload>) => void;
        "onKup-timepicker-change"?: (event: CustomEvent<KupTimePickerEventPayload>) => void;
        "onKup-timepicker-cleariconclick"?: (event: CustomEvent<KupEventPayload>) => void;
        "onKup-timepicker-click"?: (event: CustomEvent<KupTimePickerEventPayload>) => void;
        "onKup-timepicker-focus"?: (event: CustomEvent<KupTimePickerEventPayload>) => void;
        "onKup-timepicker-iconclick"?: (event: CustomEvent<KupTimePickerEventPayload>) => void;
        "onKup-timepicker-input"?: (event: CustomEvent<KupTimePickerEventPayload>) => void;
        "onKup-timepicker-itemclick"?: (event: CustomEvent<KupTimePickerEventPayload>) => void;
        "onKup-timepicker-textfieldsubmit"?: (event: CustomEvent<KupTimePickerEventPayload>) => void;
        /**
          * Minutes step.
          * @default 10
         */
        "timeMinutesStep"?: number;
    }
    interface KupTooltip {
        /**
          * Data for cell options
         */
        "cellOptions"?: TooltipCellOptions;
        /**
          * Data for top section
         */
        "data"?: TooltipData;
        /**
          * Data for the detail
         */
        "detailData"?: TooltipDetailData;
        /**
          * Timeout for loadDetail
         */
        "detailTimeout"?: number;
        /**
          * Layout used to display the items
         */
        "layout"?: string;
        /**
          * Timeout for tooltip
         */
        "loadTimeout"?: number;
        "onKup-tooltip-actioncommandclick"?: (event: CustomEvent<KupTooltipActionCommandClickEventPayload>) => void;
        "onKup-tooltip-defaultactionclick"?: (event: CustomEvent<KupTooltipDefaultEventPayload>) => void;
        "onKup-tooltip-defaultoptionclick"?: (event: CustomEvent<KupTooltipDefaultEventPayload>) => void;
        "onKup-tooltip-defaultpreviewclick"?: (event: CustomEvent<KupTooltipDefaultEventPayload>) => void;
        "onKup-tooltip-loadcelloptions"?: (event: CustomEvent<KupTooltipLoadEventPayload>) => void;
        "onKup-tooltip-loaddata"?: (event: CustomEvent<KupTooltipLoadEventPayload>) => void;
        "onKup-tooltip-loaddetail"?: (event: CustomEvent<KupTooltipLoadEventPayload>) => void;
        "onKup-tooltip-treedynamicmassexpansion"?: (event: CustomEvent<KupTooltipTreeDynamicMassExpansionEventPayload>) => void;
        "onKup-tooltip-treenodebuttonclick"?: (event: CustomEvent<KupTooltipTreeNodeButtonClickEventPayload>) => void;
        "onKup-tooltip-treenodedblclick"?: (event: CustomEvent<KupTooltipTreeNodeDblClickEventPayload>) => void;
        "onKup-tooltip-treenodeexpand"?: (event: CustomEvent<KupTooltipTreeNodeExpandEventPayload>) => void;
        /**
          * Fired when a node of the tree has been selected
         */
        "onKup-tooltip-treenodeselected"?: (event: CustomEvent<KupTooltipTreeNodeSelectedEventPayload>) => void;
        /**
          * Owner of this tooltip
         */
        "owner"?: string;
        /**
          * Container element for tooltip
         */
        "relatedObject"?: TooltipRelatedObject;
    }
    interface KupTree {
        /**
          * When enabled, the first level of depth will give an accordion look to nodes.
          * @default false
         */
        "asAccordion"?: boolean;
        /**
          * Auto select programmatic selectic node
         */
        "autoSelectionNodeMode"?: boolean;
        /**
          * The columns of the tree when tree visualization is active.
         */
        "columns"?: Column[];
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The json data used to populate the tree view: the basic, always visible tree nodes.
         */
        "data"?: TreeNode[];
        /**
          * The density of the rows, defaults at 'medium' and can also be set to 'dense' or 'wide'.
         */
        "density"?: string;
        /**
          * Function that gets invoked when a new set of nodes must be loaded as children of a node.  When useDynamicExpansion is set, the tree component will have two different behaviors depending on the value of this prop. 1 - If this prop is set to null, no callback to download data is available:    the component will emit an event requiring the parent to load the children of the given node. 2 - If this prop is set to have a callback, then the component will automatically make requests to load children of    a given node. After the load has been completed, a different event will be fired to alert the parent of the change.
          * @see useDynamicExpansion
         */
        "dynamicExpansionCallback"?: (
        treeNodeToExpand: TreeNode,
        treeNodePath: TreeNodePath
    ) => Promise<TreeNode[]> | undefined;
        /**
          * Enables the extracolumns add buttons.
         */
        "enableExtraColumns"?: boolean;
        /**
          * Flag: the nodes of the whole tree must be already expanded upon loading. Disabled nodes do NOT get expanded.
         */
        "expanded"?: boolean;
        /**
          * Behavior of nodes' expansion: it can be chosen between expanding a node by clicking on the dropdown icon, or by clicking on the whole node.
          * @default KupTreeExpansionMode.DROPDOWN
         */
        "expansionMode"?: KupTreeExpansionMode;
        /**
          * List of filters set by the user.
         */
        "filters"?: GenericFilter;
        /**
          * When set to true it activates the global filter.
         */
        "globalFilter"?: boolean;
        /**
          * The mode of the global filter (default SIMPLE)
         */
        "globalFilterMode"?: KupGlobalFilterMode;
        /**
          * The value of the global filter.
         */
        "globalFilterValue"?: string;
        "onKup-tree-buttonclick"?: (event: CustomEvent<KupTreeNodeButtonClickEventPayload>) => void;
        /**
          * When the column menu is being opened/closed.
         */
        "onKup-tree-columnmenu"?: (event: CustomEvent<KupTreeColumnMenuEventPayload>) => void;
        /**
          * Generic right click event on tree.
         */
        "onKup-tree-contextmenu"?: (event: CustomEvent<KupTreeContextMenuEventPayload>) => void;
        "onKup-tree-didload"?: (event: CustomEvent<KupEventPayload>) => void;
        /**
          * Triggered when stop propagation event
         */
        "onKup-tree-didunload"?: (event: CustomEvent<KupEventPayload>) => void;
        "onKup-tree-dynamicmassexpansion"?: (event: CustomEvent<KupTreeDynamicMassExpansionEventPayload>) => void;
        /**
          * Fired when a TreeNode gets collapsed (closed).
         */
        "onKup-tree-nodecollapse"?: (event: CustomEvent<KupTreeNodeCollapseEventPayload>) => void;
        "onKup-tree-nodedblclick"?: (event: CustomEvent<KupTreeNodeCollapseEventPayload>) => void;
        /**
          * Fired when a node expansion ion has been triggered. Contains additional data when the tree is using the dynamicExpansion feature.
          * @event kup-tree-nodeexpand
          * @type {object}
          * @property {TreeNodePath} treeNodePath - The array of indexes to retrieve the current treeNode inside the data prop.
          * @property {TreeNode} treeNode - Reference to the TreeNode data object which is being expanded (passed through the data prop).
          * @property {boolean} usesDynamicExpansion - Flag to notify that the component is running in dynamicExpansion mode.
          * @property {boolean} dynamicExpansionRequireChildren - Flag to notify that the current dynamicExpansion event requires the parent component to add TreeNode children to the given TreeNode.
          * @see useDynamicExpansion *
          * @see dynamicExpansionCallback *
          * @since 1.0.0
         */
        "onKup-tree-nodeexpand"?: (event: CustomEvent<KupTreeNodeExpandEventPayload>) => void;
        /**
          * Fired when a node of the tree has been selected
         */
        "onKup-tree-nodeselected"?: (event: CustomEvent<KupTreeNodeSelectedEventPayload>) => void;
        /**
          * Experimental feature: when active, the tree will try to prevent horizontal overflowing elements by setting a width on the content of the table cells. It works only on cells of the main column.
          * @default false;
         */
        "preventXScroll"?: boolean;
        /**
          * Sets the possibility to remove the selected column.
         */
        "removableColumns"?: boolean;
        /**
          * Activates the scroll on hover function.
         */
        "scrollOnHover"?: boolean;
        /**
          * An array of integers containing the path to a selected child.\ Groups up the properties SelFirst, SelItem, SelName.
         */
        "selectedNode"?: TreeNodePath;
        /**
          * Shows the tree data as a table.
         */
        "showColumns"?: boolean;
        /**
          * When set to true enables the column filters.
         */
        "showFilters"?: boolean;
        /**
          * When set to true shows the footer.
         */
        "showFooter"?: boolean;
        /**
          * Flag: shows the header of the tree when the tree is displayed as a table.
          * @see showColumns
         */
        "showHeader"?: boolean;
        /**
          * Shows the icons of the nodes.
         */
        "showIcons"?: boolean;
        /**
          * If set to true, displays tooltip on right click; if set to false, displays tooltip on mouseOver.
         */
        "showTooltipOnRightClick"?: boolean;
        "stateId"?: string;
        "store"?: KupStore;
        /**
          * Defines the timeout for tooltip detail
         */
        "tooltipDetailTimeout"?: number;
        /**
          * Enable show tooltip
         */
        "tooltipEnabled"?: boolean;
        /**
          * Defines the timeout for tooltip load
         */
        "tooltipLoadTimeout"?: number;
        /**
          * Defines the current totals options.
         */
        "totals"?: TotalsMap;
        /**
          * When the component must use the dynamic expansion feature to open its nodes, it means that not all the nodes of the tree have been passed inside the data property.  Therefore, when expanding a node, the tree must emit an event (or run a given callback) and wait for the child nodes to be downloaded from the server.  For more information:
          * @see dynamicExpansionCallback
         */
        "useDynamicExpansion"?: boolean;
    }
    interface IntrinsicElements {
        "kup-accordion": KupAccordion;
        "kup-autocomplete": KupAutocomplete;
        "kup-badge": KupBadge;
        "kup-box": KupBox;
        "kup-bpmn": KupBpmn;
        "kup-button": KupButton;
        "kup-button-list": KupButtonList;
        "kup-calendar": KupCalendar;
        "kup-card": KupCard;
        "kup-chart": KupChart;
        "kup-checkbox": KupCheckbox;
        "kup-chip": KupChip;
        "kup-color-picker": KupColorPicker;
        "kup-combobox": KupCombobox;
        "kup-crud": KupCrud;
        "kup-dash": KupDash;
        "kup-dash-list": KupDashList;
        "kup-data-table": KupDataTable;
        "kup-date-picker": KupDatePicker;
        "kup-drawer": KupDrawer;
        "kup-dropdown-button": KupDropdownButton;
        "kup-echart": KupEchart;
        "kup-editor": KupEditor;
        "kup-field": KupField;
        "kup-form": KupForm;
        "kup-gauge": KupGauge;
        "kup-grid": KupGrid;
        "kup-iframe": KupIframe;
        "kup-image": KupImage;
        "kup-layout": KupLayout;
        "kup-lazy": KupLazy;
        "kup-list": KupList;
        "kup-magic-box": KupMagicBox;
        "kup-modal": KupModal;
        "kup-nav-bar": KupNavBar;
        "kup-paginator": KupPaginator;
        "kup-probe": KupProbe;
        "kup-progress-bar": KupProgressBar;
        "kup-qlik": KupQlik;
        "kup-radio": KupRadio;
        "kup-rating": KupRating;
        "kup-search": KupSearch;
        "kup-spinner": KupSpinner;
        "kup-switch": KupSwitch;
        "kup-tab-bar": KupTabBar;
        "kup-text-field": KupTextField;
        "kup-time-picker": KupTimePicker;
        "kup-tooltip": KupTooltip;
        "kup-tree": KupTree;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kup-accordion": LocalJSX.KupAccordion & JSXBase.HTMLAttributes<HTMLKupAccordionElement>;
            "kup-autocomplete": LocalJSX.KupAutocomplete & JSXBase.HTMLAttributes<HTMLKupAutocompleteElement>;
            "kup-badge": LocalJSX.KupBadge & JSXBase.HTMLAttributes<HTMLKupBadgeElement>;
            "kup-box": LocalJSX.KupBox & JSXBase.HTMLAttributes<HTMLKupBoxElement>;
            "kup-bpmn": LocalJSX.KupBpmn & JSXBase.HTMLAttributes<HTMLKupBpmnElement>;
            "kup-button": LocalJSX.KupButton & JSXBase.HTMLAttributes<HTMLKupButtonElement>;
            "kup-button-list": LocalJSX.KupButtonList & JSXBase.HTMLAttributes<HTMLKupButtonListElement>;
            "kup-calendar": LocalJSX.KupCalendar & JSXBase.HTMLAttributes<HTMLKupCalendarElement>;
            "kup-card": LocalJSX.KupCard & JSXBase.HTMLAttributes<HTMLKupCardElement>;
            "kup-chart": LocalJSX.KupChart & JSXBase.HTMLAttributes<HTMLKupChartElement>;
            "kup-checkbox": LocalJSX.KupCheckbox & JSXBase.HTMLAttributes<HTMLKupCheckboxElement>;
            "kup-chip": LocalJSX.KupChip & JSXBase.HTMLAttributes<HTMLKupChipElement>;
            "kup-color-picker": LocalJSX.KupColorPicker & JSXBase.HTMLAttributes<HTMLKupColorPickerElement>;
            "kup-combobox": LocalJSX.KupCombobox & JSXBase.HTMLAttributes<HTMLKupComboboxElement>;
            "kup-crud": LocalJSX.KupCrud & JSXBase.HTMLAttributes<HTMLKupCrudElement>;
            "kup-dash": LocalJSX.KupDash & JSXBase.HTMLAttributes<HTMLKupDashElement>;
            "kup-dash-list": LocalJSX.KupDashList & JSXBase.HTMLAttributes<HTMLKupDashListElement>;
            "kup-data-table": LocalJSX.KupDataTable & JSXBase.HTMLAttributes<HTMLKupDataTableElement>;
            "kup-date-picker": LocalJSX.KupDatePicker & JSXBase.HTMLAttributes<HTMLKupDatePickerElement>;
            "kup-drawer": LocalJSX.KupDrawer & JSXBase.HTMLAttributes<HTMLKupDrawerElement>;
            "kup-dropdown-button": LocalJSX.KupDropdownButton & JSXBase.HTMLAttributes<HTMLKupDropdownButtonElement>;
            "kup-echart": LocalJSX.KupEchart & JSXBase.HTMLAttributes<HTMLKupEchartElement>;
            "kup-editor": LocalJSX.KupEditor & JSXBase.HTMLAttributes<HTMLKupEditorElement>;
            "kup-field": LocalJSX.KupField & JSXBase.HTMLAttributes<HTMLKupFieldElement>;
            "kup-form": LocalJSX.KupForm & JSXBase.HTMLAttributes<HTMLKupFormElement>;
            "kup-gauge": LocalJSX.KupGauge & JSXBase.HTMLAttributes<HTMLKupGaugeElement>;
            "kup-grid": LocalJSX.KupGrid & JSXBase.HTMLAttributes<HTMLKupGridElement>;
            "kup-iframe": LocalJSX.KupIframe & JSXBase.HTMLAttributes<HTMLKupIframeElement>;
            "kup-image": LocalJSX.KupImage & JSXBase.HTMLAttributes<HTMLKupImageElement>;
            "kup-layout": LocalJSX.KupLayout & JSXBase.HTMLAttributes<HTMLKupLayoutElement>;
            "kup-lazy": LocalJSX.KupLazy & JSXBase.HTMLAttributes<HTMLKupLazyElement>;
            "kup-list": LocalJSX.KupList & JSXBase.HTMLAttributes<HTMLKupListElement>;
            "kup-magic-box": LocalJSX.KupMagicBox & JSXBase.HTMLAttributes<HTMLKupMagicBoxElement>;
            "kup-modal": LocalJSX.KupModal & JSXBase.HTMLAttributes<HTMLKupModalElement>;
            "kup-nav-bar": LocalJSX.KupNavBar & JSXBase.HTMLAttributes<HTMLKupNavBarElement>;
            "kup-paginator": LocalJSX.KupPaginator & JSXBase.HTMLAttributes<HTMLKupPaginatorElement>;
            "kup-probe": LocalJSX.KupProbe & JSXBase.HTMLAttributes<HTMLKupProbeElement>;
            "kup-progress-bar": LocalJSX.KupProgressBar & JSXBase.HTMLAttributes<HTMLKupProgressBarElement>;
            "kup-qlik": LocalJSX.KupQlik & JSXBase.HTMLAttributes<HTMLKupQlikElement>;
            "kup-radio": LocalJSX.KupRadio & JSXBase.HTMLAttributes<HTMLKupRadioElement>;
            "kup-rating": LocalJSX.KupRating & JSXBase.HTMLAttributes<HTMLKupRatingElement>;
            "kup-search": LocalJSX.KupSearch & JSXBase.HTMLAttributes<HTMLKupSearchElement>;
            "kup-spinner": LocalJSX.KupSpinner & JSXBase.HTMLAttributes<HTMLKupSpinnerElement>;
            "kup-switch": LocalJSX.KupSwitch & JSXBase.HTMLAttributes<HTMLKupSwitchElement>;
            "kup-tab-bar": LocalJSX.KupTabBar & JSXBase.HTMLAttributes<HTMLKupTabBarElement>;
            "kup-text-field": LocalJSX.KupTextField & JSXBase.HTMLAttributes<HTMLKupTextFieldElement>;
            "kup-time-picker": LocalJSX.KupTimePicker & JSXBase.HTMLAttributes<HTMLKupTimePickerElement>;
            "kup-tooltip": LocalJSX.KupTooltip & JSXBase.HTMLAttributes<HTMLKupTooltipElement>;
            "kup-tree": LocalJSX.KupTree & JSXBase.HTMLAttributes<HTMLKupTreeElement>;
        }
    }
}
